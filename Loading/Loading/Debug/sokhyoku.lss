
sokhyoku.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000488  0000051c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000488  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000020  00800108  00800108  00000524  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000524  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000554  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000590  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000058c  00000000  00000000  00000640  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002b4  00000000  00000000  00000bcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000317  00000000  00000000  00000e80  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000240  00000000  00000000  00001198  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000298  00000000  00000000  000013d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000673  00000000  00000000  00001670  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00001ce3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 85 01 	jmp	0x30a	; 0x30a <__vector_6>
  1c:	0c 94 ba 01 	jmp	0x374	; 0x374 <__vector_7>
  20:	0c 94 ef 01 	jmp	0x3de	; 0x3de <__vector_8>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e8       	ldi	r30, 0x88	; 136
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 30       	cpi	r26, 0x08	; 8
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a8 e0       	ldi	r26, 0x08	; 8
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a8 32       	cpi	r26, 0x28	; 40
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 76 01 	call	0x2ec	; 0x2ec <main>
  c6:	0c 94 42 02 	jmp	0x484	; 0x484 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <pwmInit>:
volatile int dirPin[4][3];
volatile int maxPWM[4] = {0,PWM_max/pwmDivisor,PWM_max/pwmDivisor,PWM_max/pwmDivisor};

void pwmInit() {

		pwm_port = 0xFF;
  ce:	8f ef       	ldi	r24, 0xFF	; 255
  d0:	87 bb       	out	0x17, r24	; 23
		motor_port = 0xFF;
  d2:	84 bb       	out	0x14, r24	; 20
	
		TCCR1A |= (1<<COM1A1) | (1<<COM1B1) | (1<<COM1C1) | (1<<WGM11) ;
  d4:	8f b5       	in	r24, 0x2f	; 47
  d6:	8a 6a       	ori	r24, 0xAA	; 170
  d8:	8f bd       	out	0x2f, r24	; 47
		TCCR1B |= (1<<CS10) | (1<< WGM13) | (1<<WGM12);
  da:	8e b5       	in	r24, 0x2e	; 46
  dc:	89 61       	ori	r24, 0x19	; 25
  de:	8e bd       	out	0x2e, r24	; 46

		PORTC = 0x00;
  e0:	15 ba       	out	0x15, r1	; 21
		ICR1 = 65535;
  e2:	8f ef       	ldi	r24, 0xFF	; 255
  e4:	9f ef       	ldi	r25, 0xFF	; 255
  e6:	97 bd       	out	0x27, r25	; 39
  e8:	86 bd       	out	0x26, r24	; 38
	
		dirPin[1][1] = 0;
  ea:	e0 e1       	ldi	r30, 0x10	; 16
  ec:	f1 e0       	ldi	r31, 0x01	; 1
  ee:	11 86       	std	Z+9, r1	; 0x09
  f0:	10 86       	std	Z+8, r1	; 0x08
		dirPin[1][2] = 1;
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	93 87       	std	Z+11, r25	; 0x0b
  f8:	82 87       	std	Z+10, r24	; 0x0a
		dirPin[2][1] = 2;
  fa:	82 e0       	ldi	r24, 0x02	; 2
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	97 87       	std	Z+15, r25	; 0x0f
 100:	86 87       	std	Z+14, r24	; 0x0e
		dirPin[2][2] = 3;
 102:	83 e0       	ldi	r24, 0x03	; 3
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	91 8b       	std	Z+17, r25	; 0x11
 108:	80 8b       	std	Z+16, r24	; 0x10
		dirPin[3][1] = 4;
 10a:	84 e0       	ldi	r24, 0x04	; 4
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	95 8b       	std	Z+21, r25	; 0x15
 110:	84 8b       	std	Z+20, r24	; 0x14
		dirPin[3][2] = 5;
 112:	85 e0       	ldi	r24, 0x05	; 5
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	97 8b       	std	Z+23, r25	; 0x17
 118:	86 8b       	std	Z+22, r24	; 0x16
 11a:	08 95       	ret

0000011c <initinterrupt>:

}

void initinterrupt ()
{
	EICRA |= (1<<ISC01) | (1 << ISC11) | (1 << ISC21);
 11c:	ea e6       	ldi	r30, 0x6A	; 106
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	80 81       	ld	r24, Z
 122:	8a 62       	ori	r24, 0x2A	; 42
 124:	80 83       	st	Z, r24
	EICRB = (1 << ISC71) | (1 << ISC61) | (1 << ISC51);
 126:	88 ea       	ldi	r24, 0xA8	; 168
 128:	8a bf       	out	0x3a, r24	; 58
	EIMSK = (1<<INT5) | (1 << INT6) | (1 << INT7);
 12a:	80 ee       	ldi	r24, 0xE0	; 224
 12c:	89 bf       	out	0x39, r24	; 57
 12e:	08 95       	ret

00000130 <stop_motors>:
}
*/
void stop_motors(int n) {
	

	if(n == 1) {
 130:	81 30       	cpi	r24, 0x01	; 1
 132:	91 05       	cpc	r25, r1
 134:	d9 f4       	brne	.+54     	; 0x16c <stop_motors+0x3c>
		OCR1A = 0;
 136:	1b bc       	out	0x2b, r1	; 43
 138:	1a bc       	out	0x2a, r1	; 42
		motor_port |= (1 << dirPin[1][1]) | (1 << dirPin[1][2]);
 13a:	e0 e1       	ldi	r30, 0x10	; 16
 13c:	f1 e0       	ldi	r31, 0x01	; 1
 13e:	60 85       	ldd	r22, Z+8	; 0x08
 140:	71 85       	ldd	r23, Z+9	; 0x09
 142:	42 85       	ldd	r20, Z+10	; 0x0a
 144:	53 85       	ldd	r21, Z+11	; 0x0b
 146:	24 b3       	in	r18, 0x14	; 20
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	fc 01       	movw	r30, r24
 14e:	02 c0       	rjmp	.+4      	; 0x154 <stop_motors+0x24>
 150:	ee 0f       	add	r30, r30
 152:	ff 1f       	adc	r31, r31
 154:	4a 95       	dec	r20
 156:	e2 f7       	brpl	.-8      	; 0x150 <stop_motors+0x20>
 158:	02 c0       	rjmp	.+4      	; 0x15e <stop_motors+0x2e>
 15a:	88 0f       	add	r24, r24
 15c:	99 1f       	adc	r25, r25
 15e:	6a 95       	dec	r22
 160:	e2 f7       	brpl	.-8      	; 0x15a <stop_motors+0x2a>
 162:	8e 2b       	or	r24, r30
 164:	9f 2b       	or	r25, r31
 166:	82 2b       	or	r24, r18
 168:	84 bb       	out	0x14, r24	; 20
 16a:	08 95       	ret
	}
	else if(n == 2) {
 16c:	82 30       	cpi	r24, 0x02	; 2
 16e:	91 05       	cpc	r25, r1
 170:	d9 f4       	brne	.+54     	; 0x1a8 <stop_motors+0x78>
		OCR1B = 0;
 172:	19 bc       	out	0x29, r1	; 41
 174:	18 bc       	out	0x28, r1	; 40
		motor_port |= (1 << dirPin[2][1])|(1 << dirPin[2][2]);
 176:	e0 e1       	ldi	r30, 0x10	; 16
 178:	f1 e0       	ldi	r31, 0x01	; 1
 17a:	66 85       	ldd	r22, Z+14	; 0x0e
 17c:	77 85       	ldd	r23, Z+15	; 0x0f
 17e:	40 89       	ldd	r20, Z+16	; 0x10
 180:	51 89       	ldd	r21, Z+17	; 0x11
 182:	24 b3       	in	r18, 0x14	; 20
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	fc 01       	movw	r30, r24
 18a:	02 c0       	rjmp	.+4      	; 0x190 <stop_motors+0x60>
 18c:	ee 0f       	add	r30, r30
 18e:	ff 1f       	adc	r31, r31
 190:	4a 95       	dec	r20
 192:	e2 f7       	brpl	.-8      	; 0x18c <stop_motors+0x5c>
 194:	02 c0       	rjmp	.+4      	; 0x19a <stop_motors+0x6a>
 196:	88 0f       	add	r24, r24
 198:	99 1f       	adc	r25, r25
 19a:	6a 95       	dec	r22
 19c:	e2 f7       	brpl	.-8      	; 0x196 <stop_motors+0x66>
 19e:	8e 2b       	or	r24, r30
 1a0:	9f 2b       	or	r25, r31
 1a2:	82 2b       	or	r24, r18
 1a4:	84 bb       	out	0x14, r24	; 20
 1a6:	08 95       	ret
	}
	else if(n == 3) {
 1a8:	03 97       	sbiw	r24, 0x03	; 3
 1aa:	e1 f4       	brne	.+56     	; 0x1e4 <stop_motors+0xb4>
		OCR1C = 0;
 1ac:	10 92 79 00 	sts	0x0079, r1
 1b0:	10 92 78 00 	sts	0x0078, r1
		motor_port |= (1 << dirPin[3][1])|(1 << dirPin[3][2]);
 1b4:	e0 e1       	ldi	r30, 0x10	; 16
 1b6:	f1 e0       	ldi	r31, 0x01	; 1
 1b8:	64 89       	ldd	r22, Z+20	; 0x14
 1ba:	75 89       	ldd	r23, Z+21	; 0x15
 1bc:	46 89       	ldd	r20, Z+22	; 0x16
 1be:	57 89       	ldd	r21, Z+23	; 0x17
 1c0:	24 b3       	in	r18, 0x14	; 20
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	fc 01       	movw	r30, r24
 1c8:	02 c0       	rjmp	.+4      	; 0x1ce <stop_motors+0x9e>
 1ca:	ee 0f       	add	r30, r30
 1cc:	ff 1f       	adc	r31, r31
 1ce:	4a 95       	dec	r20
 1d0:	e2 f7       	brpl	.-8      	; 0x1ca <stop_motors+0x9a>
 1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <stop_motors+0xa8>
 1d4:	88 0f       	add	r24, r24
 1d6:	99 1f       	adc	r25, r25
 1d8:	6a 95       	dec	r22
 1da:	e2 f7       	brpl	.-8      	; 0x1d4 <stop_motors+0xa4>
 1dc:	8e 2b       	or	r24, r30
 1de:	9f 2b       	or	r25, r31
 1e0:	82 2b       	or	r24, r18
 1e2:	84 bb       	out	0x14, r24	; 20
 1e4:	08 95       	ret

000001e6 <rotateMotor>:
}


void rotateMotor(int n) {
	
	if(n == all) {
 1e6:	00 97       	sbiw	r24, 0x00	; 0
 1e8:	a9 f5       	brne	.+106    	; 0x254 <rotateMotor+0x6e>
		OCR1A = maxPWM[1] ;
 1ea:	e0 e0       	ldi	r30, 0x00	; 0
 1ec:	f1 e0       	ldi	r31, 0x01	; 1
 1ee:	82 81       	ldd	r24, Z+2	; 0x02
 1f0:	93 81       	ldd	r25, Z+3	; 0x03
 1f2:	9b bd       	out	0x2b, r25	; 43
 1f4:	8a bd       	out	0x2a, r24	; 42
		OCR1B = maxPWM[2];
 1f6:	84 81       	ldd	r24, Z+4	; 0x04
 1f8:	95 81       	ldd	r25, Z+5	; 0x05
 1fa:	99 bd       	out	0x29, r25	; 41
 1fc:	88 bd       	out	0x28, r24	; 40
		OCR1C = maxPWM[3];
 1fe:	86 81       	ldd	r24, Z+6	; 0x06
 200:	97 81       	ldd	r25, Z+7	; 0x07
 202:	90 93 79 00 	sts	0x0079, r25
 206:	80 93 78 00 	sts	0x0078, r24
		dir_port = 0;
 20a:	15 ba       	out	0x15, r1	; 21
		dir_port |= (1 << dirPin[1][1]) | (1 << dirPin[2][1]) | (1 << dirPin[3][1]);
 20c:	e0 e1       	ldi	r30, 0x10	; 16
 20e:	f1 e0       	ldi	r31, 0x01	; 1
 210:	20 85       	ldd	r18, Z+8	; 0x08
 212:	31 85       	ldd	r19, Z+9	; 0x09
 214:	a6 85       	ldd	r26, Z+14	; 0x0e
 216:	b7 85       	ldd	r27, Z+15	; 0x0f
 218:	64 89       	ldd	r22, Z+20	; 0x14
 21a:	75 89       	ldd	r23, Z+21	; 0x15
 21c:	45 b3       	in	r20, 0x15	; 21
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	fc 01       	movw	r30, r24
 224:	02 c0       	rjmp	.+4      	; 0x22a <rotateMotor+0x44>
 226:	ee 0f       	add	r30, r30
 228:	ff 1f       	adc	r31, r31
 22a:	aa 95       	dec	r26
 22c:	e2 f7       	brpl	.-8      	; 0x226 <rotateMotor+0x40>
 22e:	dc 01       	movw	r26, r24
 230:	02 c0       	rjmp	.+4      	; 0x236 <rotateMotor+0x50>
 232:	aa 0f       	add	r26, r26
 234:	bb 1f       	adc	r27, r27
 236:	2a 95       	dec	r18
 238:	e2 f7       	brpl	.-8      	; 0x232 <rotateMotor+0x4c>
 23a:	9d 01       	movw	r18, r26
 23c:	2e 2b       	or	r18, r30
 23e:	3f 2b       	or	r19, r31
 240:	02 c0       	rjmp	.+4      	; 0x246 <rotateMotor+0x60>
 242:	88 0f       	add	r24, r24
 244:	99 1f       	adc	r25, r25
 246:	6a 95       	dec	r22
 248:	e2 f7       	brpl	.-8      	; 0x242 <rotateMotor+0x5c>
 24a:	82 2b       	or	r24, r18
 24c:	93 2b       	or	r25, r19
 24e:	84 2b       	or	r24, r20
 250:	85 bb       	out	0x15, r24	; 21
 		return;
 252:	08 95       	ret
	}
	
	else if(n == 1) {
 254:	81 30       	cpi	r24, 0x01	; 1
 256:	91 05       	cpc	r25, r1
 258:	b1 f4       	brne	.+44     	; 0x286 <rotateMotor+0xa0>
		OCR1A = maxPWM[1];
 25a:	80 91 02 01 	lds	r24, 0x0102
 25e:	90 91 03 01 	lds	r25, 0x0103
 262:	9b bd       	out	0x2b, r25	; 43
 264:	8a bd       	out	0x2a, r24	; 42
		dir_port = 0;
 266:	15 ba       	out	0x15, r1	; 21
		dir_port |= (1 << dirPin[1][1]);
 268:	40 91 18 01 	lds	r20, 0x0118
 26c:	50 91 19 01 	lds	r21, 0x0119
 270:	25 b3       	in	r18, 0x15	; 21
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	02 c0       	rjmp	.+4      	; 0x27c <rotateMotor+0x96>
 278:	88 0f       	add	r24, r24
 27a:	99 1f       	adc	r25, r25
 27c:	4a 95       	dec	r20
 27e:	e2 f7       	brpl	.-8      	; 0x278 <rotateMotor+0x92>
 280:	82 2b       	or	r24, r18
 282:	85 bb       	out	0x15, r24	; 21
	    return;
 284:	08 95       	ret
	}	
	
	else if(n == 2) {
 286:	82 30       	cpi	r24, 0x02	; 2
 288:	91 05       	cpc	r25, r1
 28a:	b1 f4       	brne	.+44     	; 0x2b8 <rotateMotor+0xd2>
		OCR1B = maxPWM[2];
 28c:	80 91 04 01 	lds	r24, 0x0104
 290:	90 91 05 01 	lds	r25, 0x0105
 294:	99 bd       	out	0x29, r25	; 41
 296:	88 bd       	out	0x28, r24	; 40
		dir_port = 0;
 298:	15 ba       	out	0x15, r1	; 21
		dir_port |= (1 << dirPin[2][1]);
 29a:	40 91 1e 01 	lds	r20, 0x011E
 29e:	50 91 1f 01 	lds	r21, 0x011F
 2a2:	25 b3       	in	r18, 0x15	; 21
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	02 c0       	rjmp	.+4      	; 0x2ae <rotateMotor+0xc8>
 2aa:	88 0f       	add	r24, r24
 2ac:	99 1f       	adc	r25, r25
 2ae:	4a 95       	dec	r20
 2b0:	e2 f7       	brpl	.-8      	; 0x2aa <rotateMotor+0xc4>
 2b2:	82 2b       	or	r24, r18
 2b4:	85 bb       	out	0x15, r24	; 21
		return;
 2b6:	08 95       	ret
	}
	
	else if(n == 3) {
 2b8:	03 97       	sbiw	r24, 0x03	; 3
 2ba:	b9 f4       	brne	.+46     	; 0x2ea <rotateMotor+0x104>
		OCR1C = maxPWM[3];
 2bc:	80 91 06 01 	lds	r24, 0x0106
 2c0:	90 91 07 01 	lds	r25, 0x0107
 2c4:	90 93 79 00 	sts	0x0079, r25
 2c8:	80 93 78 00 	sts	0x0078, r24
		dir_port = 0;
 2cc:	15 ba       	out	0x15, r1	; 21
		dir_port |= (1 << dirPin[3][1]);
 2ce:	40 91 24 01 	lds	r20, 0x0124
 2d2:	50 91 25 01 	lds	r21, 0x0125
 2d6:	25 b3       	in	r18, 0x15	; 21
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	02 c0       	rjmp	.+4      	; 0x2e2 <rotateMotor+0xfc>
 2de:	88 0f       	add	r24, r24
 2e0:	99 1f       	adc	r25, r25
 2e2:	4a 95       	dec	r20
 2e4:	e2 f7       	brpl	.-8      	; 0x2de <rotateMotor+0xf8>
 2e6:	82 2b       	or	r24, r18
 2e8:	85 bb       	out	0x15, r24	; 21
 2ea:	08 95       	ret

000002ec <main>:
	rotateMotor(data);
}

int main(void)
{
	pwmInit();
 2ec:	0e 94 67 00 	call	0xce	; 0xce <pwmInit>
	initinterrupt();
 2f0:	0e 94 8e 00 	call	0x11c	; 0x11c <initinterrupt>
	USART_Init(12,0);
 2f4:	60 e0       	ldi	r22, 0x00	; 0
 2f6:	8c e0       	ldi	r24, 0x0C	; 12
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	0e 94 24 02 	call	0x448	; 0x448 <USART_Init>
	rotateMotor(all);
 2fe:	80 e0       	ldi	r24, 0x00	; 0
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <rotateMotor>
	sei();
 306:	78 94       	sei

		while (1) {
	//rotateMotor(all);
		}	
 308:	ff cf       	rjmp	.-2      	; 0x308 <main+0x1c>

0000030a <__vector_6>:
}

ISR(INT5_vect) {
 30a:	1f 92       	push	r1
 30c:	0f 92       	push	r0
 30e:	0f b6       	in	r0, 0x3f	; 63
 310:	0f 92       	push	r0
 312:	11 24       	eor	r1, r1
 314:	0b b6       	in	r0, 0x3b	; 59
 316:	0f 92       	push	r0
 318:	2f 93       	push	r18
 31a:	3f 93       	push	r19
 31c:	4f 93       	push	r20
 31e:	5f 93       	push	r21
 320:	6f 93       	push	r22
 322:	7f 93       	push	r23
 324:	8f 93       	push	r24
 326:	9f 93       	push	r25
 328:	af 93       	push	r26
 32a:	bf 93       	push	r27
 32c:	ef 93       	push	r30
 32e:	ff 93       	push	r31
	diskCount[1]++;
 330:	e8 e0       	ldi	r30, 0x08	; 8
 332:	f1 e0       	ldi	r31, 0x01	; 1
 334:	82 81       	ldd	r24, Z+2	; 0x02
 336:	93 81       	ldd	r25, Z+3	; 0x03
 338:	01 96       	adiw	r24, 0x01	; 1
 33a:	93 83       	std	Z+3, r25	; 0x03
 33c:	82 83       	std	Z+2, r24	; 0x02
	if(diskCount[1] ==1){
 33e:	82 81       	ldd	r24, Z+2	; 0x02
 340:	93 81       	ldd	r25, Z+3	; 0x03
 342:	01 97       	sbiw	r24, 0x01	; 1
 344:	21 f4       	brne	.+8      	; 0x34e <__vector_6+0x44>
		stop_motors(1);
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	0e 94 98 00 	call	0x130	; 0x130 <stop_motors>
	}
}
 34e:	ff 91       	pop	r31
 350:	ef 91       	pop	r30
 352:	bf 91       	pop	r27
 354:	af 91       	pop	r26
 356:	9f 91       	pop	r25
 358:	8f 91       	pop	r24
 35a:	7f 91       	pop	r23
 35c:	6f 91       	pop	r22
 35e:	5f 91       	pop	r21
 360:	4f 91       	pop	r20
 362:	3f 91       	pop	r19
 364:	2f 91       	pop	r18
 366:	0f 90       	pop	r0
 368:	0b be       	out	0x3b, r0	; 59
 36a:	0f 90       	pop	r0
 36c:	0f be       	out	0x3f, r0	; 63
 36e:	0f 90       	pop	r0
 370:	1f 90       	pop	r1
 372:	18 95       	reti

00000374 <__vector_7>:

ISR(INT6_vect) {
 374:	1f 92       	push	r1
 376:	0f 92       	push	r0
 378:	0f b6       	in	r0, 0x3f	; 63
 37a:	0f 92       	push	r0
 37c:	11 24       	eor	r1, r1
 37e:	0b b6       	in	r0, 0x3b	; 59
 380:	0f 92       	push	r0
 382:	2f 93       	push	r18
 384:	3f 93       	push	r19
 386:	4f 93       	push	r20
 388:	5f 93       	push	r21
 38a:	6f 93       	push	r22
 38c:	7f 93       	push	r23
 38e:	8f 93       	push	r24
 390:	9f 93       	push	r25
 392:	af 93       	push	r26
 394:	bf 93       	push	r27
 396:	ef 93       	push	r30
 398:	ff 93       	push	r31
	diskCount[2]++;
 39a:	e8 e0       	ldi	r30, 0x08	; 8
 39c:	f1 e0       	ldi	r31, 0x01	; 1
 39e:	84 81       	ldd	r24, Z+4	; 0x04
 3a0:	95 81       	ldd	r25, Z+5	; 0x05
 3a2:	01 96       	adiw	r24, 0x01	; 1
 3a4:	95 83       	std	Z+5, r25	; 0x05
 3a6:	84 83       	std	Z+4, r24	; 0x04
	if(diskCount[2] == 1){
 3a8:	84 81       	ldd	r24, Z+4	; 0x04
 3aa:	95 81       	ldd	r25, Z+5	; 0x05
 3ac:	01 97       	sbiw	r24, 0x01	; 1
 3ae:	21 f4       	brne	.+8      	; 0x3b8 <__vector_7+0x44>
	stop_motors(2);
 3b0:	82 e0       	ldi	r24, 0x02	; 2
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	0e 94 98 00 	call	0x130	; 0x130 <stop_motors>
	}
}
 3b8:	ff 91       	pop	r31
 3ba:	ef 91       	pop	r30
 3bc:	bf 91       	pop	r27
 3be:	af 91       	pop	r26
 3c0:	9f 91       	pop	r25
 3c2:	8f 91       	pop	r24
 3c4:	7f 91       	pop	r23
 3c6:	6f 91       	pop	r22
 3c8:	5f 91       	pop	r21
 3ca:	4f 91       	pop	r20
 3cc:	3f 91       	pop	r19
 3ce:	2f 91       	pop	r18
 3d0:	0f 90       	pop	r0
 3d2:	0b be       	out	0x3b, r0	; 59
 3d4:	0f 90       	pop	r0
 3d6:	0f be       	out	0x3f, r0	; 63
 3d8:	0f 90       	pop	r0
 3da:	1f 90       	pop	r1
 3dc:	18 95       	reti

000003de <__vector_8>:

ISR(INT7_vect) {
 3de:	1f 92       	push	r1
 3e0:	0f 92       	push	r0
 3e2:	0f b6       	in	r0, 0x3f	; 63
 3e4:	0f 92       	push	r0
 3e6:	11 24       	eor	r1, r1
 3e8:	0b b6       	in	r0, 0x3b	; 59
 3ea:	0f 92       	push	r0
 3ec:	2f 93       	push	r18
 3ee:	3f 93       	push	r19
 3f0:	4f 93       	push	r20
 3f2:	5f 93       	push	r21
 3f4:	6f 93       	push	r22
 3f6:	7f 93       	push	r23
 3f8:	8f 93       	push	r24
 3fa:	9f 93       	push	r25
 3fc:	af 93       	push	r26
 3fe:	bf 93       	push	r27
 400:	ef 93       	push	r30
 402:	ff 93       	push	r31
	diskCount[3]++;
 404:	e8 e0       	ldi	r30, 0x08	; 8
 406:	f1 e0       	ldi	r31, 0x01	; 1
 408:	86 81       	ldd	r24, Z+6	; 0x06
 40a:	97 81       	ldd	r25, Z+7	; 0x07
 40c:	01 96       	adiw	r24, 0x01	; 1
 40e:	97 83       	std	Z+7, r25	; 0x07
 410:	86 83       	std	Z+6, r24	; 0x06
	if(diskCount[3] == 1){
 412:	86 81       	ldd	r24, Z+6	; 0x06
 414:	97 81       	ldd	r25, Z+7	; 0x07
 416:	01 97       	sbiw	r24, 0x01	; 1
 418:	21 f4       	brne	.+8      	; 0x422 <__vector_8+0x44>
		stop_motors(3);
 41a:	83 e0       	ldi	r24, 0x03	; 3
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	0e 94 98 00 	call	0x130	; 0x130 <stop_motors>
	}	
 422:	ff 91       	pop	r31
 424:	ef 91       	pop	r30
 426:	bf 91       	pop	r27
 428:	af 91       	pop	r26
 42a:	9f 91       	pop	r25
 42c:	8f 91       	pop	r24
 42e:	7f 91       	pop	r23
 430:	6f 91       	pop	r22
 432:	5f 91       	pop	r21
 434:	4f 91       	pop	r20
 436:	3f 91       	pop	r19
 438:	2f 91       	pop	r18
 43a:	0f 90       	pop	r0
 43c:	0b be       	out	0x3b, r0	; 59
 43e:	0f 90       	pop	r0
 440:	0f be       	out	0x3f, r0	; 63
 442:	0f 90       	pop	r0
 444:	1f 90       	pop	r1
 446:	18 95       	reti

00000448 <USART_Init>:
	}
}

void USART_Init( unsigned int baud, uint8_t n )
{
	sei();
 448:	78 94       	sei
	if(n)
 44a:	66 23       	and	r22, r22
 44c:	79 f0       	breq	.+30     	; 0x46c <USART_Init+0x24>
	{
		//Initialize baud Rate(4800)
		UBRR1H=(unsigned char)(baud>>8);
 44e:	90 93 98 00 	sts	0x0098, r25
		UBRR1L=(unsigned char)baud;
 452:	80 93 99 00 	sts	0x0099, r24
		//TX RX Enable
		UCSR1B|=(1<<RXEN0)|(1<<TXEN0);
 456:	ea e9       	ldi	r30, 0x9A	; 154
 458:	f0 e0       	ldi	r31, 0x00	; 0
 45a:	80 81       	ld	r24, Z
 45c:	88 61       	ori	r24, 0x18	; 24
 45e:	80 83       	st	Z, r24
		//Set 8-bit data, Parity disabled
		UCSR1C |=(3<<UCSZ10);
 460:	ed e9       	ldi	r30, 0x9D	; 157
 462:	f0 e0       	ldi	r31, 0x00	; 0
 464:	80 81       	ld	r24, Z
 466:	86 60       	ori	r24, 0x06	; 6
 468:	80 83       	st	Z, r24
 46a:	08 95       	ret
		
	}else
	{
		//Initialize baud Rate(9600)
		UBRR0H=(unsigned char)(baud>>8);
 46c:	90 93 90 00 	sts	0x0090, r25
		UBRR0L=(unsigned char)baud;
 470:	89 b9       	out	0x09, r24	; 9
		//TX RX Enable
		UCSR0B|=(1<<RXEN0)|(1<<TXEN0);//|(1<<UCSZ02);
 472:	8a b1       	in	r24, 0x0a	; 10
 474:	88 61       	ori	r24, 0x18	; 24
 476:	8a b9       	out	0x0a, r24	; 10
		//Set 8-bit data, Parity disabled
		UCSR0C |= (3<<UCSZ00);
 478:	e5 e9       	ldi	r30, 0x95	; 149
 47a:	f0 e0       	ldi	r31, 0x00	; 0
 47c:	80 81       	ld	r24, Z
 47e:	86 60       	ori	r24, 0x06	; 6
 480:	80 83       	st	Z, r24
 482:	08 95       	ret

00000484 <_exit>:
 484:	f8 94       	cli

00000486 <__stop_program>:
 486:	ff cf       	rjmp	.-2      	; 0x486 <__stop_program>
