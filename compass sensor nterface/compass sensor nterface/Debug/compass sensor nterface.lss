
compass sensor nterface.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000082c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000008  00800060  00800060  000008a0  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  000008a0  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000000d0  00000000  00000000  000008d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000006e5  00000000  00000000  000009a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000363  00000000  00000000  00001085  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000003de  00000000  00000000  000013e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000001b4  00000000  00000000  000017c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000002c9  00000000  00000000  0000197c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000382  00000000  00000000  00001c45  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000a0  00000000  00000000  00001fc7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 41 00 	jmp	0x82	; 0x82 <__ctors_end>
   4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   8:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  10:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  14:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  18:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  1c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  20:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  24:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  28:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  2c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  30:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  34:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  38:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  3c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  40:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  44:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  4c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  50:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  54:	08 4a       	sbci	r16, 0xA8	; 168
  56:	d7 3b       	cpi	r29, 0xB7	; 183
  58:	3b ce       	rjmp	.-906    	; 0xfffffcd0 <__eeprom_end+0xff7efcd0>
  5a:	01 6e       	ori	r16, 0xE1	; 225
  5c:	84 bc       	out	0x24, r8	; 36
  5e:	bf fd       	.word	0xfdbf	; ????
  60:	c1 2f       	mov	r28, r17
  62:	3d 6c       	ori	r19, 0xCD	; 205
  64:	74 31       	cpi	r23, 0x14	; 20
  66:	9a bd       	out	0x2a, r25	; 42
  68:	56 83       	std	Z+6, r21	; 0x06
  6a:	3d da       	rcall	.-2950   	; 0xfffff4e6 <__eeprom_end+0xff7ef4e6>
  6c:	3d 00       	.word	0x003d	; ????
  6e:	c7 7f       	andi	r28, 0xF7	; 247
  70:	11 be       	out	0x31, r1	; 49
  72:	d9 e4       	ldi	r29, 0x49	; 73
  74:	bb 4c       	sbci	r27, 0xCB	; 203
  76:	3e 91       	ld	r19, -X
  78:	6b aa       	std	Y+51, r6	; 0x33
  7a:	aa be       	out	0x3a, r10	; 58
  7c:	00 00       	nop
  7e:	00 80       	ld	r0, Z
  80:	3f 00       	.word	0x003f	; ????

00000082 <__ctors_end>:
  82:	11 24       	eor	r1, r1
  84:	1f be       	out	0x3f, r1	; 63
  86:	cf e5       	ldi	r28, 0x5F	; 95
  88:	d8 e0       	ldi	r29, 0x08	; 8
  8a:	de bf       	out	0x3e, r29	; 62
  8c:	cd bf       	out	0x3d, r28	; 61

0000008e <__do_clear_bss>:
  8e:	20 e0       	ldi	r18, 0x00	; 0
  90:	a0 e6       	ldi	r26, 0x60	; 96
  92:	b0 e0       	ldi	r27, 0x00	; 0
  94:	01 c0       	rjmp	.+2      	; 0x98 <.do_clear_bss_start>

00000096 <.do_clear_bss_loop>:
  96:	1d 92       	st	X+, r1

00000098 <.do_clear_bss_start>:
  98:	a8 36       	cpi	r26, 0x68	; 104
  9a:	b2 07       	cpc	r27, r18
  9c:	e1 f7       	brne	.-8      	; 0x96 <.do_clear_bss_loop>
  9e:	0e 94 55 00 	call	0xaa	; 0xaa <main>
  a2:	0c 94 14 04 	jmp	0x828	; 0x828 <_exit>

000000a6 <__bad_interrupt>:
  a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000aa <main>:
#include <avr/io.h>
#include "compass_sensor.h"
#include "USART_32.h"

int main(void)
{
  aa:	cf 93       	push	r28
  ac:	df 93       	push	r29
  ae:	00 d0       	rcall	.+0      	; 0xb0 <main+0x6>
  b0:	cd b7       	in	r28, 0x3d	; 61
  b2:	de b7       	in	r29, 0x3e	; 62
volatile int degree = 0;
  b4:	1a 82       	std	Y+2, r1	; 0x02
  b6:	19 82       	std	Y+1, r1	; 0x01
	
init_HMC5883L();
  b8:	0e 94 ad 00 	call	0x15a	; 0x15a <init_HMC5883L>
USART_Init(12);
  bc:	8c e0       	ldi	r24, 0x0C	; 12
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	0e 94 4e 01 	call	0x29c	; 0x29c <USART_Init>

    while(1)
    {
      degree = getHeading();
  c4:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <getHeading>
  c8:	9a 83       	std	Y+2, r25	; 0x02
  ca:	89 83       	std	Y+1, r24	; 0x01
      USART_TransmitNumber(degree);
  cc:	69 81       	ldd	r22, Y+1	; 0x01
  ce:	7a 81       	ldd	r23, Y+2	; 0x02
  d0:	88 27       	eor	r24, r24
  d2:	77 fd       	sbrc	r23, 7
  d4:	80 95       	com	r24
  d6:	98 2f       	mov	r25, r24
  d8:	0e 94 59 01 	call	0x2b2	; 0x2b2 <USART_TransmitNumber>
      USART_Transmitchar(' ');
  dc:	80 e2       	ldi	r24, 0x20	; 32
  de:	0e 94 55 01 	call	0x2aa	; 0x2aa <USART_Transmitchar>
      USART_Transmitchar(0x0D);
  e2:	8d e0       	ldi	r24, 0x0D	; 13
  e4:	0e 94 55 01 	call	0x2aa	; 0x2aa <USART_Transmitchar>
  e8:	ed cf       	rjmp	.-38     	; 0xc4 <main+0x1a>

000000ea <I2C_start>:
	TWBR = TWBR_val;
}

uint8_t I2C_start(uint8_t address){
	// reset TWI control register
	TWCR = 0;
  ea:	16 be       	out	0x36, r1	; 54
	// transmit START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
  ec:	94 ea       	ldi	r25, 0xA4	; 164
  ee:	96 bf       	out	0x36, r25	; 54
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
  f0:	06 b6       	in	r0, 0x36	; 54
  f2:	07 fe       	sbrs	r0, 7
  f4:	fd cf       	rjmp	.-6      	; 0xf0 <I2C_start+0x6>
	
	// check if the start condition was successfully transmitted
if((TWSR & 0xF8) != TW_START){ return 1; }
  f6:	91 b1       	in	r25, 0x01	; 1
  f8:	98 7f       	andi	r25, 0xF8	; 248
  fa:	98 30       	cpi	r25, 0x08	; 8
  fc:	79 f4       	brne	.+30     	; 0x11c <I2C_start+0x32>

// load slave address into data register
TWDR = address;
  fe:	83 b9       	out	0x03, r24	; 3
// start transmission of address
TWCR = (1<<TWINT) | (1<<TWEN);
 100:	84 e8       	ldi	r24, 0x84	; 132
 102:	86 bf       	out	0x36, r24	; 54
// wait for end of transmission
while( !(TWCR & (1<<TWINT)) );
 104:	06 b6       	in	r0, 0x36	; 54
 106:	07 fe       	sbrs	r0, 7
 108:	fd cf       	rjmp	.-6      	; 0x104 <I2C_start+0x1a>

// check if the device has acknowledged the READ / WRITE mode
uint8_t twst = TW_STATUS & 0xF8;
 10a:	91 b1       	in	r25, 0x01	; 1
 10c:	98 7f       	andi	r25, 0xF8	; 248
if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
 10e:	98 31       	cpi	r25, 0x18	; 24
 110:	39 f0       	breq	.+14     	; 0x120 <I2C_start+0x36>
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	90 34       	cpi	r25, 0x40	; 64
 116:	29 f4       	brne	.+10     	; 0x122 <I2C_start+0x38>
 118:	80 e0       	ldi	r24, 0x00	; 0
 11a:	08 95       	ret
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
	
	// check if the start condition was successfully transmitted
if((TWSR & 0xF8) != TW_START){ return 1; }
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	08 95       	ret

// check if the device has acknowledged the READ / WRITE mode
uint8_t twst = TW_STATUS & 0xF8;
if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;

return 0;
 120:	80 e0       	ldi	r24, 0x00	; 0
}
 122:	08 95       	ret

00000124 <I2C_write>:

uint8_t I2C_write(uint8_t data){
	// load data into data register
	TWDR = data;
 124:	83 b9       	out	0x03, r24	; 3
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
 126:	84 e8       	ldi	r24, 0x84	; 132
 128:	86 bf       	out	0x36, r24	; 54
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
 12a:	06 b6       	in	r0, 0x36	; 54
 12c:	07 fe       	sbrs	r0, 7
 12e:	fd cf       	rjmp	.-6      	; 0x12a <I2C_write+0x6>
	
	if( (TWSR & 0xF8) != TW_MT_DATA_ACK ){ return 1; }
 130:	91 b1       	in	r25, 0x01	; 1
 132:	98 7f       	andi	r25, 0xF8	; 248
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	98 32       	cpi	r25, 0x28	; 40
 138:	09 f4       	brne	.+2      	; 0x13c <I2C_write+0x18>
 13a:	80 e0       	ldi	r24, 0x00	; 0
	
	return 0;
}
 13c:	08 95       	ret

0000013e <I2C_read_ack>:

uint8_t I2C_read_ack(void){
	
	// start TWI module and acknowledge data after reception
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA); 
 13e:	84 ec       	ldi	r24, 0xC4	; 196
 140:	86 bf       	out	0x36, r24	; 54
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
 142:	06 b6       	in	r0, 0x36	; 54
 144:	07 fe       	sbrs	r0, 7
 146:	fd cf       	rjmp	.-6      	; 0x142 <I2C_read_ack+0x4>
	// return received data from TWDR
	return TWDR;
 148:	83 b1       	in	r24, 0x03	; 3
}
 14a:	08 95       	ret

0000014c <I2C_read_nack>:

uint8_t I2C_read_nack(void){
	
	// start receiving without acknowledging reception
	TWCR = (1<<TWINT) | (1<<TWEN);
 14c:	84 e8       	ldi	r24, 0x84	; 132
 14e:	86 bf       	out	0x36, r24	; 54
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
 150:	06 b6       	in	r0, 0x36	; 54
 152:	07 fe       	sbrs	r0, 7
 154:	fd cf       	rjmp	.-6      	; 0x150 <I2C_read_nack+0x4>
	// return received data from TWDR
	return TWDR;
 156:	83 b1       	in	r24, 0x03	; 3
}
 158:	08 95       	ret

0000015a <init_HMC5883L>:
void I2C_stop(void){
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
}

void init_HMC5883L(void){
 15a:	cf 93       	push	r28
int16_t raw_y = 0;
int16_t raw_z = 0;
uint16_t headingDegrees = 0;

void I2C_init(void){
	TWBR = TWBR_val;
 15c:	80 e2       	ldi	r24, 0x20	; 32
 15e:	80 b9       	out	0x00, r24	; 0
}

void init_HMC5883L(void){

	I2C_init();
	I2C_start(HMC5883L_WRITE);
 160:	8c e3       	ldi	r24, 0x3C	; 60
 162:	0e 94 75 00 	call	0xea	; 0xea <I2C_start>
	I2C_write(0x00); // set pointer to CRA
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	0e 94 92 00 	call	0x124	; 0x124 <I2C_write>
	I2C_write(0x70); // write 0x70 to CRA
 16c:	80 e7       	ldi	r24, 0x70	; 112
 16e:	0e 94 92 00 	call	0x124	; 0x124 <I2C_write>
	return TWDR;
}

void I2C_stop(void){
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 172:	c4 e9       	ldi	r28, 0x94	; 148
 174:	c6 bf       	out	0x36, r28	; 54
	I2C_start(HMC5883L_WRITE);
	I2C_write(0x00); // set pointer to CRA
	I2C_write(0x70); // write 0x70 to CRA
	I2C_stop();

	I2C_start(HMC5883L_WRITE);
 176:	8c e3       	ldi	r24, 0x3C	; 60
 178:	0e 94 75 00 	call	0xea	; 0xea <I2C_start>
	I2C_write(0x01); // set pointer to CRB
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	0e 94 92 00 	call	0x124	; 0x124 <I2C_write>
	I2C_write(0xA0);
 182:	80 ea       	ldi	r24, 0xA0	; 160
 184:	0e 94 92 00 	call	0x124	; 0x124 <I2C_write>
	return TWDR;
}

void I2C_stop(void){
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 188:	c6 bf       	out	0x36, r28	; 54
	I2C_start(HMC5883L_WRITE);
	I2C_write(0x01); // set pointer to CRB
	I2C_write(0xA0);
	I2C_stop();

	I2C_start(HMC5883L_WRITE);
 18a:	8c e3       	ldi	r24, 0x3C	; 60
 18c:	0e 94 75 00 	call	0xea	; 0xea <I2C_start>
	I2C_write(0x02); // set pointer to measurement mode
 190:	82 e0       	ldi	r24, 0x02	; 2
 192:	0e 94 92 00 	call	0x124	; 0x124 <I2C_write>
	I2C_write(0x00); // continous measurement
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	0e 94 92 00 	call	0x124	; 0x124 <I2C_write>
	return TWDR;
}

void I2C_stop(void){
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 19c:	c6 bf       	out	0x36, r28	; 54

	I2C_start(HMC5883L_WRITE);
	I2C_write(0x02); // set pointer to measurement mode
	I2C_write(0x00); // continous measurement
	I2C_stop();
}
 19e:	cf 91       	pop	r28
 1a0:	08 95       	ret

000001a2 <getHeading>:

uint16_t getHeading(void){
 1a2:	cf 92       	push	r12
 1a4:	df 92       	push	r13
 1a6:	ef 92       	push	r14
 1a8:	ff 92       	push	r15
 1aa:	cf 93       	push	r28

	I2C_start(HMC5883L_WRITE);
 1ac:	8c e3       	ldi	r24, 0x3C	; 60
 1ae:	0e 94 75 00 	call	0xea	; 0xea <I2C_start>
	I2C_write(0x03); // set pointer to X axis MSB
 1b2:	83 e0       	ldi	r24, 0x03	; 3
 1b4:	0e 94 92 00 	call	0x124	; 0x124 <I2C_write>
	return TWDR;
}

void I2C_stop(void){
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 1b8:	c4 e9       	ldi	r28, 0x94	; 148
 1ba:	c6 bf       	out	0x36, r28	; 54

	I2C_start(HMC5883L_WRITE);
	I2C_write(0x03); // set pointer to X axis MSB
	I2C_stop();

	I2C_start(HMC5883L_READ);
 1bc:	8d e3       	ldi	r24, 0x3D	; 61
 1be:	0e 94 75 00 	call	0xea	; 0xea <I2C_start>

	raw_x = ((uint8_t)I2C_read_ack())<<8;
 1c2:	0e 94 9f 00 	call	0x13e	; 0x13e <I2C_read_ack>
 1c6:	10 92 66 00 	sts	0x0066, r1
 1ca:	80 93 67 00 	sts	0x0067, r24
	raw_x |= I2C_read_ack();
 1ce:	0e 94 9f 00 	call	0x13e	; 0x13e <I2C_read_ack>
 1d2:	20 91 66 00 	lds	r18, 0x0066
 1d6:	30 91 67 00 	lds	r19, 0x0067
 1da:	28 2b       	or	r18, r24
 1dc:	30 93 67 00 	sts	0x0067, r19
 1e0:	20 93 66 00 	sts	0x0066, r18

	raw_z = ((uint8_t)I2C_read_ack())<<8;
 1e4:	0e 94 9f 00 	call	0x13e	; 0x13e <I2C_read_ack>
 1e8:	10 92 62 00 	sts	0x0062, r1
 1ec:	80 93 63 00 	sts	0x0063, r24
	raw_z |= I2C_read_ack();
 1f0:	0e 94 9f 00 	call	0x13e	; 0x13e <I2C_read_ack>
 1f4:	20 91 62 00 	lds	r18, 0x0062
 1f8:	30 91 63 00 	lds	r19, 0x0063
 1fc:	28 2b       	or	r18, r24
 1fe:	30 93 63 00 	sts	0x0063, r19
 202:	20 93 62 00 	sts	0x0062, r18

	raw_y = ((uint8_t)I2C_read_ack())<<8;
 206:	0e 94 9f 00 	call	0x13e	; 0x13e <I2C_read_ack>
 20a:	10 92 64 00 	sts	0x0064, r1
 20e:	80 93 65 00 	sts	0x0065, r24
	raw_y |= I2C_read_nack();
 212:	0e 94 a6 00 	call	0x14c	; 0x14c <I2C_read_nack>
 216:	20 91 64 00 	lds	r18, 0x0064
 21a:	30 91 65 00 	lds	r19, 0x0065
 21e:	28 2b       	or	r18, r24
 220:	30 93 65 00 	sts	0x0065, r19
 224:	20 93 64 00 	sts	0x0064, r18
	return TWDR;
}

void I2C_stop(void){
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 228:	c6 bf       	out	0x36, r28	; 54
	raw_y = ((uint8_t)I2C_read_ack())<<8;
	raw_y |= I2C_read_nack();

	I2C_stop();

	headingDegrees = (uint16_t)(atan2((double)raw_y,(double)raw_x) * 180 / 3.141592654 + 180);
 22a:	60 91 66 00 	lds	r22, 0x0066
 22e:	70 91 67 00 	lds	r23, 0x0067
 232:	88 27       	eor	r24, r24
 234:	77 fd       	sbrc	r23, 7
 236:	80 95       	com	r24
 238:	98 2f       	mov	r25, r24
 23a:	0e 94 f6 02 	call	0x5ec	; 0x5ec <__floatsisf>
 23e:	6b 01       	movw	r12, r22
 240:	7c 01       	movw	r14, r24
 242:	60 91 64 00 	lds	r22, 0x0064
 246:	70 91 65 00 	lds	r23, 0x0065
 24a:	88 27       	eor	r24, r24
 24c:	77 fd       	sbrc	r23, 7
 24e:	80 95       	com	r24
 250:	98 2f       	mov	r25, r24
 252:	0e 94 f6 02 	call	0x5ec	; 0x5ec <__floatsisf>
 256:	a7 01       	movw	r20, r14
 258:	96 01       	movw	r18, r12
 25a:	0e 94 0d 02 	call	0x41a	; 0x41a <atan2>
 25e:	20 e0       	ldi	r18, 0x00	; 0
 260:	30 e0       	ldi	r19, 0x00	; 0
 262:	44 e3       	ldi	r20, 0x34	; 52
 264:	53 e4       	ldi	r21, 0x43	; 67
 266:	0e 94 ae 03 	call	0x75c	; 0x75c <__mulsf3>
 26a:	2b ed       	ldi	r18, 0xDB	; 219
 26c:	3f e0       	ldi	r19, 0x0F	; 15
 26e:	49 e4       	ldi	r20, 0x49	; 73
 270:	50 e4       	ldi	r21, 0x40	; 64
 272:	0e 94 60 02 	call	0x4c0	; 0x4c0 <__divsf3>
 276:	20 e0       	ldi	r18, 0x00	; 0
 278:	30 e0       	ldi	r19, 0x00	; 0
 27a:	44 e3       	ldi	r20, 0x34	; 52
 27c:	53 e4       	ldi	r21, 0x43	; 67
 27e:	0e 94 9a 01 	call	0x334	; 0x334 <__addsf3>
 282:	0e 94 c8 02 	call	0x590	; 0x590 <__fixunssfsi>
 286:	70 93 61 00 	sts	0x0061, r23
 28a:	60 93 60 00 	sts	0x0060, r22

	return headingDegrees;
 28e:	cb 01       	movw	r24, r22
 290:	cf 91       	pop	r28
 292:	ff 90       	pop	r15
 294:	ef 90       	pop	r14
 296:	df 90       	pop	r13
 298:	cf 90       	pop	r12
 29a:	08 95       	ret

0000029c <USART_Init>:
void USART_Init( unsigned int baud )
{
	/* Set baud rate */
	//unsigned int num;
	//num=((F_CPU)/(16*baud))-1;
	UBRRH = (unsigned char)(baud>>8);
 29c:	90 bd       	out	0x20, r25	; 32
	UBRRL = (unsigned char)baud;
 29e:	89 b9       	out	0x09, r24	; 9
	/* Enable receiver and transmitter */
	UCSRB = (1<<RXEN)|(1<<TXEN); //|(1<<RXCIE);
 2a0:	88 e1       	ldi	r24, 0x18	; 24
 2a2:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 2stop bit */
	UCSRC = (1<<URSEL)|(1<<USBS)|(3<<UCSZ0);
 2a4:	8e e8       	ldi	r24, 0x8E	; 142
 2a6:	80 bd       	out	0x20, r24	; 32
 2a8:	08 95       	ret

000002aa <USART_Transmitchar>:
}

void USART_Transmitchar( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSRA & (1<<UDRE)) )
 2aa:	5d 9b       	sbis	0x0b, 5	; 11
 2ac:	fe cf       	rjmp	.-4      	; 0x2aa <USART_Transmitchar>
	;
	/* Put data into buffer, sends the data */
	UDR = data;
 2ae:	8c b9       	out	0x0c, r24	; 12
 2b0:	08 95       	ret

000002b2 <USART_TransmitNumber>:
		 //_delay_ms(1);
		 str++;
	 }
}

void USART_TransmitNumber(unsigned long n){
 2b2:	0f 93       	push	r16
 2b4:	1f 93       	push	r17
 2b6:	cf 93       	push	r28
 2b8:	df 93       	push	r29
  if(n >= 10){
 2ba:	6a 30       	cpi	r22, 0x0A	; 10
 2bc:	71 05       	cpc	r23, r1
 2be:	81 05       	cpc	r24, r1
 2c0:	91 05       	cpc	r25, r1
 2c2:	60 f0       	brcs	.+24     	; 0x2dc <USART_TransmitNumber+0x2a>
    USART_TransmitNumber(n/10);
 2c4:	2a e0       	ldi	r18, 0x0A	; 10
 2c6:	30 e0       	ldi	r19, 0x00	; 0
 2c8:	40 e0       	ldi	r20, 0x00	; 0
 2ca:	50 e0       	ldi	r21, 0x00	; 0
 2cc:	0e 94 77 01 	call	0x2ee	; 0x2ee <__udivmodsi4>
 2d0:	06 2f       	mov	r16, r22
 2d2:	ca 01       	movw	r24, r20
 2d4:	b9 01       	movw	r22, r18
 2d6:	0e 94 59 01 	call	0x2b2	; 0x2b2 <USART_TransmitNumber>
    n = n%10;
 2da:	60 2f       	mov	r22, r16
  }
  USART_Transmitchar(n+'0'); /* n is between 0 and 9 */
 2dc:	80 e3       	ldi	r24, 0x30	; 48
 2de:	86 0f       	add	r24, r22
 2e0:	0e 94 55 01 	call	0x2aa	; 0x2aa <USART_Transmitchar>
}
 2e4:	df 91       	pop	r29
 2e6:	cf 91       	pop	r28
 2e8:	1f 91       	pop	r17
 2ea:	0f 91       	pop	r16
 2ec:	08 95       	ret

000002ee <__udivmodsi4>:
 2ee:	a1 e2       	ldi	r26, 0x21	; 33
 2f0:	1a 2e       	mov	r1, r26
 2f2:	aa 1b       	sub	r26, r26
 2f4:	bb 1b       	sub	r27, r27
 2f6:	fd 01       	movw	r30, r26
 2f8:	0d c0       	rjmp	.+26     	; 0x314 <__udivmodsi4_ep>

000002fa <__udivmodsi4_loop>:
 2fa:	aa 1f       	adc	r26, r26
 2fc:	bb 1f       	adc	r27, r27
 2fe:	ee 1f       	adc	r30, r30
 300:	ff 1f       	adc	r31, r31
 302:	a2 17       	cp	r26, r18
 304:	b3 07       	cpc	r27, r19
 306:	e4 07       	cpc	r30, r20
 308:	f5 07       	cpc	r31, r21
 30a:	20 f0       	brcs	.+8      	; 0x314 <__udivmodsi4_ep>
 30c:	a2 1b       	sub	r26, r18
 30e:	b3 0b       	sbc	r27, r19
 310:	e4 0b       	sbc	r30, r20
 312:	f5 0b       	sbc	r31, r21

00000314 <__udivmodsi4_ep>:
 314:	66 1f       	adc	r22, r22
 316:	77 1f       	adc	r23, r23
 318:	88 1f       	adc	r24, r24
 31a:	99 1f       	adc	r25, r25
 31c:	1a 94       	dec	r1
 31e:	69 f7       	brne	.-38     	; 0x2fa <__udivmodsi4_loop>
 320:	60 95       	com	r22
 322:	70 95       	com	r23
 324:	80 95       	com	r24
 326:	90 95       	com	r25
 328:	9b 01       	movw	r18, r22
 32a:	ac 01       	movw	r20, r24
 32c:	bd 01       	movw	r22, r26
 32e:	cf 01       	movw	r24, r30
 330:	08 95       	ret

00000332 <__subsf3>:
 332:	50 58       	subi	r21, 0x80	; 128

00000334 <__addsf3>:
 334:	bb 27       	eor	r27, r27
 336:	aa 27       	eor	r26, r26
 338:	0e d0       	rcall	.+28     	; 0x356 <__addsf3x>
 33a:	cf c1       	rjmp	.+926    	; 0x6da <__fp_round>
 33c:	c0 d1       	rcall	.+896    	; 0x6be <__fp_pscA>
 33e:	30 f0       	brcs	.+12     	; 0x34c <__addsf3+0x18>
 340:	c5 d1       	rcall	.+906    	; 0x6cc <__fp_pscB>
 342:	20 f0       	brcs	.+8      	; 0x34c <__addsf3+0x18>
 344:	31 f4       	brne	.+12     	; 0x352 <__addsf3+0x1e>
 346:	9f 3f       	cpi	r25, 0xFF	; 255
 348:	11 f4       	brne	.+4      	; 0x34e <__addsf3+0x1a>
 34a:	1e f4       	brtc	.+6      	; 0x352 <__addsf3+0x1e>
 34c:	90 c1       	rjmp	.+800    	; 0x66e <__fp_nan>
 34e:	0e f4       	brtc	.+2      	; 0x352 <__addsf3+0x1e>
 350:	e0 95       	com	r30
 352:	e7 fb       	bst	r30, 7
 354:	86 c1       	rjmp	.+780    	; 0x662 <__fp_inf>

00000356 <__addsf3x>:
 356:	e9 2f       	mov	r30, r25
 358:	d1 d1       	rcall	.+930    	; 0x6fc <__fp_split3>
 35a:	80 f3       	brcs	.-32     	; 0x33c <__addsf3+0x8>
 35c:	ba 17       	cp	r27, r26
 35e:	62 07       	cpc	r22, r18
 360:	73 07       	cpc	r23, r19
 362:	84 07       	cpc	r24, r20
 364:	95 07       	cpc	r25, r21
 366:	18 f0       	brcs	.+6      	; 0x36e <__addsf3x+0x18>
 368:	71 f4       	brne	.+28     	; 0x386 <__addsf3x+0x30>
 36a:	9e f5       	brtc	.+102    	; 0x3d2 <__addsf3x+0x7c>
 36c:	e9 c1       	rjmp	.+978    	; 0x740 <__fp_zero>
 36e:	0e f4       	brtc	.+2      	; 0x372 <__addsf3x+0x1c>
 370:	e0 95       	com	r30
 372:	0b 2e       	mov	r0, r27
 374:	ba 2f       	mov	r27, r26
 376:	a0 2d       	mov	r26, r0
 378:	0b 01       	movw	r0, r22
 37a:	b9 01       	movw	r22, r18
 37c:	90 01       	movw	r18, r0
 37e:	0c 01       	movw	r0, r24
 380:	ca 01       	movw	r24, r20
 382:	a0 01       	movw	r20, r0
 384:	11 24       	eor	r1, r1
 386:	ff 27       	eor	r31, r31
 388:	59 1b       	sub	r21, r25
 38a:	99 f0       	breq	.+38     	; 0x3b2 <__addsf3x+0x5c>
 38c:	59 3f       	cpi	r21, 0xF9	; 249
 38e:	50 f4       	brcc	.+20     	; 0x3a4 <__addsf3x+0x4e>
 390:	50 3e       	cpi	r21, 0xE0	; 224
 392:	68 f1       	brcs	.+90     	; 0x3ee <__addsf3x+0x98>
 394:	1a 16       	cp	r1, r26
 396:	f0 40       	sbci	r31, 0x00	; 0
 398:	a2 2f       	mov	r26, r18
 39a:	23 2f       	mov	r18, r19
 39c:	34 2f       	mov	r19, r20
 39e:	44 27       	eor	r20, r20
 3a0:	58 5f       	subi	r21, 0xF8	; 248
 3a2:	f3 cf       	rjmp	.-26     	; 0x38a <__addsf3x+0x34>
 3a4:	46 95       	lsr	r20
 3a6:	37 95       	ror	r19
 3a8:	27 95       	ror	r18
 3aa:	a7 95       	ror	r26
 3ac:	f0 40       	sbci	r31, 0x00	; 0
 3ae:	53 95       	inc	r21
 3b0:	c9 f7       	brne	.-14     	; 0x3a4 <__addsf3x+0x4e>
 3b2:	7e f4       	brtc	.+30     	; 0x3d2 <__addsf3x+0x7c>
 3b4:	1f 16       	cp	r1, r31
 3b6:	ba 0b       	sbc	r27, r26
 3b8:	62 0b       	sbc	r22, r18
 3ba:	73 0b       	sbc	r23, r19
 3bc:	84 0b       	sbc	r24, r20
 3be:	ba f0       	brmi	.+46     	; 0x3ee <__addsf3x+0x98>
 3c0:	91 50       	subi	r25, 0x01	; 1
 3c2:	a1 f0       	breq	.+40     	; 0x3ec <__addsf3x+0x96>
 3c4:	ff 0f       	add	r31, r31
 3c6:	bb 1f       	adc	r27, r27
 3c8:	66 1f       	adc	r22, r22
 3ca:	77 1f       	adc	r23, r23
 3cc:	88 1f       	adc	r24, r24
 3ce:	c2 f7       	brpl	.-16     	; 0x3c0 <__addsf3x+0x6a>
 3d0:	0e c0       	rjmp	.+28     	; 0x3ee <__addsf3x+0x98>
 3d2:	ba 0f       	add	r27, r26
 3d4:	62 1f       	adc	r22, r18
 3d6:	73 1f       	adc	r23, r19
 3d8:	84 1f       	adc	r24, r20
 3da:	48 f4       	brcc	.+18     	; 0x3ee <__addsf3x+0x98>
 3dc:	87 95       	ror	r24
 3de:	77 95       	ror	r23
 3e0:	67 95       	ror	r22
 3e2:	b7 95       	ror	r27
 3e4:	f7 95       	ror	r31
 3e6:	9e 3f       	cpi	r25, 0xFE	; 254
 3e8:	08 f0       	brcs	.+2      	; 0x3ec <__addsf3x+0x96>
 3ea:	b3 cf       	rjmp	.-154    	; 0x352 <__addsf3+0x1e>
 3ec:	93 95       	inc	r25
 3ee:	88 0f       	add	r24, r24
 3f0:	08 f0       	brcs	.+2      	; 0x3f4 <__addsf3x+0x9e>
 3f2:	99 27       	eor	r25, r25
 3f4:	ee 0f       	add	r30, r30
 3f6:	97 95       	ror	r25
 3f8:	87 95       	ror	r24
 3fa:	08 95       	ret
 3fc:	60 d1       	rcall	.+704    	; 0x6be <__fp_pscA>
 3fe:	58 f0       	brcs	.+22     	; 0x416 <__addsf3x+0xc0>
 400:	80 e8       	ldi	r24, 0x80	; 128
 402:	91 e0       	ldi	r25, 0x01	; 1
 404:	09 f4       	brne	.+2      	; 0x408 <__addsf3x+0xb2>
 406:	9e ef       	ldi	r25, 0xFE	; 254
 408:	61 d1       	rcall	.+706    	; 0x6cc <__fp_pscB>
 40a:	28 f0       	brcs	.+10     	; 0x416 <__addsf3x+0xc0>
 40c:	40 e8       	ldi	r20, 0x80	; 128
 40e:	51 e0       	ldi	r21, 0x01	; 1
 410:	59 f4       	brne	.+22     	; 0x428 <atan2+0xe>
 412:	5e ef       	ldi	r21, 0xFE	; 254
 414:	09 c0       	rjmp	.+18     	; 0x428 <atan2+0xe>
 416:	2b c1       	rjmp	.+598    	; 0x66e <__fp_nan>
 418:	93 c1       	rjmp	.+806    	; 0x740 <__fp_zero>

0000041a <atan2>:
 41a:	e9 2f       	mov	r30, r25
 41c:	e0 78       	andi	r30, 0x80	; 128
 41e:	6e d1       	rcall	.+732    	; 0x6fc <__fp_split3>
 420:	68 f3       	brcs	.-38     	; 0x3fc <__addsf3x+0xa6>
 422:	09 2e       	mov	r0, r25
 424:	05 2a       	or	r0, r21
 426:	c1 f3       	breq	.-16     	; 0x418 <__addsf3x+0xc2>
 428:	26 17       	cp	r18, r22
 42a:	37 07       	cpc	r19, r23
 42c:	48 07       	cpc	r20, r24
 42e:	59 07       	cpc	r21, r25
 430:	38 f0       	brcs	.+14     	; 0x440 <atan2+0x26>
 432:	0e 2e       	mov	r0, r30
 434:	07 f8       	bld	r0, 7
 436:	e0 25       	eor	r30, r0
 438:	69 f0       	breq	.+26     	; 0x454 <atan2+0x3a>
 43a:	e0 25       	eor	r30, r0
 43c:	e0 64       	ori	r30, 0x40	; 64
 43e:	0a c0       	rjmp	.+20     	; 0x454 <atan2+0x3a>
 440:	ef 63       	ori	r30, 0x3F	; 63
 442:	07 f8       	bld	r0, 7
 444:	00 94       	com	r0
 446:	07 fa       	bst	r0, 7
 448:	db 01       	movw	r26, r22
 44a:	b9 01       	movw	r22, r18
 44c:	9d 01       	movw	r18, r26
 44e:	dc 01       	movw	r26, r24
 450:	ca 01       	movw	r24, r20
 452:	ad 01       	movw	r20, r26
 454:	ef 93       	push	r30
 456:	43 d0       	rcall	.+134    	; 0x4de <__divsf3_pse>
 458:	40 d1       	rcall	.+640    	; 0x6da <__fp_round>
 45a:	0a d0       	rcall	.+20     	; 0x470 <atan>
 45c:	5f 91       	pop	r21
 45e:	55 23       	and	r21, r21
 460:	31 f0       	breq	.+12     	; 0x46e <atan2+0x54>
 462:	2b ed       	ldi	r18, 0xDB	; 219
 464:	3f e0       	ldi	r19, 0x0F	; 15
 466:	49 e4       	ldi	r20, 0x49	; 73
 468:	50 fd       	sbrc	r21, 0
 46a:	49 ec       	ldi	r20, 0xC9	; 201
 46c:	63 cf       	rjmp	.-314    	; 0x334 <__addsf3>
 46e:	08 95       	ret

00000470 <atan>:
 470:	df 93       	push	r29
 472:	dd 27       	eor	r29, r29
 474:	b9 2f       	mov	r27, r25
 476:	bf 77       	andi	r27, 0x7F	; 127
 478:	40 e8       	ldi	r20, 0x80	; 128
 47a:	5f e3       	ldi	r21, 0x3F	; 63
 47c:	16 16       	cp	r1, r22
 47e:	17 06       	cpc	r1, r23
 480:	48 07       	cpc	r20, r24
 482:	5b 07       	cpc	r21, r27
 484:	10 f4       	brcc	.+4      	; 0x48a <atan+0x1a>
 486:	d9 2f       	mov	r29, r25
 488:	62 d1       	rcall	.+708    	; 0x74e <inverse>
 48a:	9f 93       	push	r25
 48c:	8f 93       	push	r24
 48e:	7f 93       	push	r23
 490:	6f 93       	push	r22
 492:	c7 d1       	rcall	.+910    	; 0x822 <square>
 494:	e4 e5       	ldi	r30, 0x54	; 84
 496:	f0 e0       	ldi	r31, 0x00	; 0
 498:	ed d0       	rcall	.+474    	; 0x674 <__fp_powser>
 49a:	1f d1       	rcall	.+574    	; 0x6da <__fp_round>
 49c:	2f 91       	pop	r18
 49e:	3f 91       	pop	r19
 4a0:	4f 91       	pop	r20
 4a2:	5f 91       	pop	r21
 4a4:	67 d1       	rcall	.+718    	; 0x774 <__mulsf3x>
 4a6:	dd 23       	and	r29, r29
 4a8:	49 f0       	breq	.+18     	; 0x4bc <atan+0x4c>
 4aa:	90 58       	subi	r25, 0x80	; 128
 4ac:	a2 ea       	ldi	r26, 0xA2	; 162
 4ae:	2a ed       	ldi	r18, 0xDA	; 218
 4b0:	3f e0       	ldi	r19, 0x0F	; 15
 4b2:	49 ec       	ldi	r20, 0xC9	; 201
 4b4:	5f e3       	ldi	r21, 0x3F	; 63
 4b6:	d0 78       	andi	r29, 0x80	; 128
 4b8:	5d 27       	eor	r21, r29
 4ba:	4d df       	rcall	.-358    	; 0x356 <__addsf3x>
 4bc:	df 91       	pop	r29
 4be:	0d c1       	rjmp	.+538    	; 0x6da <__fp_round>

000004c0 <__divsf3>:
 4c0:	0c d0       	rcall	.+24     	; 0x4da <__divsf3x>
 4c2:	0b c1       	rjmp	.+534    	; 0x6da <__fp_round>
 4c4:	03 d1       	rcall	.+518    	; 0x6cc <__fp_pscB>
 4c6:	40 f0       	brcs	.+16     	; 0x4d8 <__divsf3+0x18>
 4c8:	fa d0       	rcall	.+500    	; 0x6be <__fp_pscA>
 4ca:	30 f0       	brcs	.+12     	; 0x4d8 <__divsf3+0x18>
 4cc:	21 f4       	brne	.+8      	; 0x4d6 <__divsf3+0x16>
 4ce:	5f 3f       	cpi	r21, 0xFF	; 255
 4d0:	19 f0       	breq	.+6      	; 0x4d8 <__divsf3+0x18>
 4d2:	c7 c0       	rjmp	.+398    	; 0x662 <__fp_inf>
 4d4:	51 11       	cpse	r21, r1
 4d6:	35 c1       	rjmp	.+618    	; 0x742 <__fp_szero>
 4d8:	ca c0       	rjmp	.+404    	; 0x66e <__fp_nan>

000004da <__divsf3x>:
 4da:	10 d1       	rcall	.+544    	; 0x6fc <__fp_split3>
 4dc:	98 f3       	brcs	.-26     	; 0x4c4 <__divsf3+0x4>

000004de <__divsf3_pse>:
 4de:	99 23       	and	r25, r25
 4e0:	c9 f3       	breq	.-14     	; 0x4d4 <__divsf3+0x14>
 4e2:	55 23       	and	r21, r21
 4e4:	b1 f3       	breq	.-20     	; 0x4d2 <__divsf3+0x12>
 4e6:	95 1b       	sub	r25, r21
 4e8:	55 0b       	sbc	r21, r21
 4ea:	bb 27       	eor	r27, r27
 4ec:	aa 27       	eor	r26, r26
 4ee:	62 17       	cp	r22, r18
 4f0:	73 07       	cpc	r23, r19
 4f2:	84 07       	cpc	r24, r20
 4f4:	38 f0       	brcs	.+14     	; 0x504 <__divsf3_pse+0x26>
 4f6:	9f 5f       	subi	r25, 0xFF	; 255
 4f8:	5f 4f       	sbci	r21, 0xFF	; 255
 4fa:	22 0f       	add	r18, r18
 4fc:	33 1f       	adc	r19, r19
 4fe:	44 1f       	adc	r20, r20
 500:	aa 1f       	adc	r26, r26
 502:	a9 f3       	breq	.-22     	; 0x4ee <__divsf3_pse+0x10>
 504:	33 d0       	rcall	.+102    	; 0x56c <__divsf3_pse+0x8e>
 506:	0e 2e       	mov	r0, r30
 508:	3a f0       	brmi	.+14     	; 0x518 <__divsf3_pse+0x3a>
 50a:	e0 e8       	ldi	r30, 0x80	; 128
 50c:	30 d0       	rcall	.+96     	; 0x56e <__divsf3_pse+0x90>
 50e:	91 50       	subi	r25, 0x01	; 1
 510:	50 40       	sbci	r21, 0x00	; 0
 512:	e6 95       	lsr	r30
 514:	00 1c       	adc	r0, r0
 516:	ca f7       	brpl	.-14     	; 0x50a <__divsf3_pse+0x2c>
 518:	29 d0       	rcall	.+82     	; 0x56c <__divsf3_pse+0x8e>
 51a:	fe 2f       	mov	r31, r30
 51c:	27 d0       	rcall	.+78     	; 0x56c <__divsf3_pse+0x8e>
 51e:	66 0f       	add	r22, r22
 520:	77 1f       	adc	r23, r23
 522:	88 1f       	adc	r24, r24
 524:	bb 1f       	adc	r27, r27
 526:	26 17       	cp	r18, r22
 528:	37 07       	cpc	r19, r23
 52a:	48 07       	cpc	r20, r24
 52c:	ab 07       	cpc	r26, r27
 52e:	b0 e8       	ldi	r27, 0x80	; 128
 530:	09 f0       	breq	.+2      	; 0x534 <__divsf3_pse+0x56>
 532:	bb 0b       	sbc	r27, r27
 534:	80 2d       	mov	r24, r0
 536:	bf 01       	movw	r22, r30
 538:	ff 27       	eor	r31, r31
 53a:	93 58       	subi	r25, 0x83	; 131
 53c:	5f 4f       	sbci	r21, 0xFF	; 255
 53e:	2a f0       	brmi	.+10     	; 0x54a <__divsf3_pse+0x6c>
 540:	9e 3f       	cpi	r25, 0xFE	; 254
 542:	51 05       	cpc	r21, r1
 544:	68 f0       	brcs	.+26     	; 0x560 <__divsf3_pse+0x82>
 546:	8d c0       	rjmp	.+282    	; 0x662 <__fp_inf>
 548:	fc c0       	rjmp	.+504    	; 0x742 <__fp_szero>
 54a:	5f 3f       	cpi	r21, 0xFF	; 255
 54c:	ec f3       	brlt	.-6      	; 0x548 <__divsf3_pse+0x6a>
 54e:	98 3e       	cpi	r25, 0xE8	; 232
 550:	dc f3       	brlt	.-10     	; 0x548 <__divsf3_pse+0x6a>
 552:	86 95       	lsr	r24
 554:	77 95       	ror	r23
 556:	67 95       	ror	r22
 558:	b7 95       	ror	r27
 55a:	f7 95       	ror	r31
 55c:	9f 5f       	subi	r25, 0xFF	; 255
 55e:	c9 f7       	brne	.-14     	; 0x552 <__divsf3_pse+0x74>
 560:	88 0f       	add	r24, r24
 562:	91 1d       	adc	r25, r1
 564:	96 95       	lsr	r25
 566:	87 95       	ror	r24
 568:	97 f9       	bld	r25, 7
 56a:	08 95       	ret
 56c:	e1 e0       	ldi	r30, 0x01	; 1
 56e:	66 0f       	add	r22, r22
 570:	77 1f       	adc	r23, r23
 572:	88 1f       	adc	r24, r24
 574:	bb 1f       	adc	r27, r27
 576:	62 17       	cp	r22, r18
 578:	73 07       	cpc	r23, r19
 57a:	84 07       	cpc	r24, r20
 57c:	ba 07       	cpc	r27, r26
 57e:	20 f0       	brcs	.+8      	; 0x588 <__divsf3_pse+0xaa>
 580:	62 1b       	sub	r22, r18
 582:	73 0b       	sbc	r23, r19
 584:	84 0b       	sbc	r24, r20
 586:	ba 0b       	sbc	r27, r26
 588:	ee 1f       	adc	r30, r30
 58a:	88 f7       	brcc	.-30     	; 0x56e <__divsf3_pse+0x90>
 58c:	e0 95       	com	r30
 58e:	08 95       	ret

00000590 <__fixunssfsi>:
 590:	bd d0       	rcall	.+378    	; 0x70c <__fp_splitA>
 592:	88 f0       	brcs	.+34     	; 0x5b6 <__fixunssfsi+0x26>
 594:	9f 57       	subi	r25, 0x7F	; 127
 596:	90 f0       	brcs	.+36     	; 0x5bc <__fixunssfsi+0x2c>
 598:	b9 2f       	mov	r27, r25
 59a:	99 27       	eor	r25, r25
 59c:	b7 51       	subi	r27, 0x17	; 23
 59e:	a0 f0       	brcs	.+40     	; 0x5c8 <__fixunssfsi+0x38>
 5a0:	d1 f0       	breq	.+52     	; 0x5d6 <__fixunssfsi+0x46>
 5a2:	66 0f       	add	r22, r22
 5a4:	77 1f       	adc	r23, r23
 5a6:	88 1f       	adc	r24, r24
 5a8:	99 1f       	adc	r25, r25
 5aa:	1a f0       	brmi	.+6      	; 0x5b2 <__fixunssfsi+0x22>
 5ac:	ba 95       	dec	r27
 5ae:	c9 f7       	brne	.-14     	; 0x5a2 <__fixunssfsi+0x12>
 5b0:	12 c0       	rjmp	.+36     	; 0x5d6 <__fixunssfsi+0x46>
 5b2:	b1 30       	cpi	r27, 0x01	; 1
 5b4:	81 f0       	breq	.+32     	; 0x5d6 <__fixunssfsi+0x46>
 5b6:	c4 d0       	rcall	.+392    	; 0x740 <__fp_zero>
 5b8:	b1 e0       	ldi	r27, 0x01	; 1
 5ba:	08 95       	ret
 5bc:	c1 c0       	rjmp	.+386    	; 0x740 <__fp_zero>
 5be:	67 2f       	mov	r22, r23
 5c0:	78 2f       	mov	r23, r24
 5c2:	88 27       	eor	r24, r24
 5c4:	b8 5f       	subi	r27, 0xF8	; 248
 5c6:	39 f0       	breq	.+14     	; 0x5d6 <__fixunssfsi+0x46>
 5c8:	b9 3f       	cpi	r27, 0xF9	; 249
 5ca:	cc f3       	brlt	.-14     	; 0x5be <__fixunssfsi+0x2e>
 5cc:	86 95       	lsr	r24
 5ce:	77 95       	ror	r23
 5d0:	67 95       	ror	r22
 5d2:	b3 95       	inc	r27
 5d4:	d9 f7       	brne	.-10     	; 0x5cc <__fixunssfsi+0x3c>
 5d6:	3e f4       	brtc	.+14     	; 0x5e6 <__fixunssfsi+0x56>
 5d8:	90 95       	com	r25
 5da:	80 95       	com	r24
 5dc:	70 95       	com	r23
 5de:	61 95       	neg	r22
 5e0:	7f 4f       	sbci	r23, 0xFF	; 255
 5e2:	8f 4f       	sbci	r24, 0xFF	; 255
 5e4:	9f 4f       	sbci	r25, 0xFF	; 255
 5e6:	08 95       	ret

000005e8 <__floatunsisf>:
 5e8:	e8 94       	clt
 5ea:	09 c0       	rjmp	.+18     	; 0x5fe <__floatsisf+0x12>

000005ec <__floatsisf>:
 5ec:	97 fb       	bst	r25, 7
 5ee:	3e f4       	brtc	.+14     	; 0x5fe <__floatsisf+0x12>
 5f0:	90 95       	com	r25
 5f2:	80 95       	com	r24
 5f4:	70 95       	com	r23
 5f6:	61 95       	neg	r22
 5f8:	7f 4f       	sbci	r23, 0xFF	; 255
 5fa:	8f 4f       	sbci	r24, 0xFF	; 255
 5fc:	9f 4f       	sbci	r25, 0xFF	; 255
 5fe:	99 23       	and	r25, r25
 600:	a9 f0       	breq	.+42     	; 0x62c <__floatsisf+0x40>
 602:	f9 2f       	mov	r31, r25
 604:	96 e9       	ldi	r25, 0x96	; 150
 606:	bb 27       	eor	r27, r27
 608:	93 95       	inc	r25
 60a:	f6 95       	lsr	r31
 60c:	87 95       	ror	r24
 60e:	77 95       	ror	r23
 610:	67 95       	ror	r22
 612:	b7 95       	ror	r27
 614:	f1 11       	cpse	r31, r1
 616:	f8 cf       	rjmp	.-16     	; 0x608 <__floatsisf+0x1c>
 618:	fa f4       	brpl	.+62     	; 0x658 <__floatsisf+0x6c>
 61a:	bb 0f       	add	r27, r27
 61c:	11 f4       	brne	.+4      	; 0x622 <__floatsisf+0x36>
 61e:	60 ff       	sbrs	r22, 0
 620:	1b c0       	rjmp	.+54     	; 0x658 <__floatsisf+0x6c>
 622:	6f 5f       	subi	r22, 0xFF	; 255
 624:	7f 4f       	sbci	r23, 0xFF	; 255
 626:	8f 4f       	sbci	r24, 0xFF	; 255
 628:	9f 4f       	sbci	r25, 0xFF	; 255
 62a:	16 c0       	rjmp	.+44     	; 0x658 <__floatsisf+0x6c>
 62c:	88 23       	and	r24, r24
 62e:	11 f0       	breq	.+4      	; 0x634 <__floatsisf+0x48>
 630:	96 e9       	ldi	r25, 0x96	; 150
 632:	11 c0       	rjmp	.+34     	; 0x656 <__floatsisf+0x6a>
 634:	77 23       	and	r23, r23
 636:	21 f0       	breq	.+8      	; 0x640 <__floatsisf+0x54>
 638:	9e e8       	ldi	r25, 0x8E	; 142
 63a:	87 2f       	mov	r24, r23
 63c:	76 2f       	mov	r23, r22
 63e:	05 c0       	rjmp	.+10     	; 0x64a <__floatsisf+0x5e>
 640:	66 23       	and	r22, r22
 642:	71 f0       	breq	.+28     	; 0x660 <__floatsisf+0x74>
 644:	96 e8       	ldi	r25, 0x86	; 134
 646:	86 2f       	mov	r24, r22
 648:	70 e0       	ldi	r23, 0x00	; 0
 64a:	60 e0       	ldi	r22, 0x00	; 0
 64c:	2a f0       	brmi	.+10     	; 0x658 <__floatsisf+0x6c>
 64e:	9a 95       	dec	r25
 650:	66 0f       	add	r22, r22
 652:	77 1f       	adc	r23, r23
 654:	88 1f       	adc	r24, r24
 656:	da f7       	brpl	.-10     	; 0x64e <__floatsisf+0x62>
 658:	88 0f       	add	r24, r24
 65a:	96 95       	lsr	r25
 65c:	87 95       	ror	r24
 65e:	97 f9       	bld	r25, 7
 660:	08 95       	ret

00000662 <__fp_inf>:
 662:	97 f9       	bld	r25, 7
 664:	9f 67       	ori	r25, 0x7F	; 127
 666:	80 e8       	ldi	r24, 0x80	; 128
 668:	70 e0       	ldi	r23, 0x00	; 0
 66a:	60 e0       	ldi	r22, 0x00	; 0
 66c:	08 95       	ret

0000066e <__fp_nan>:
 66e:	9f ef       	ldi	r25, 0xFF	; 255
 670:	80 ec       	ldi	r24, 0xC0	; 192
 672:	08 95       	ret

00000674 <__fp_powser>:
 674:	df 93       	push	r29
 676:	cf 93       	push	r28
 678:	1f 93       	push	r17
 67a:	0f 93       	push	r16
 67c:	ff 92       	push	r15
 67e:	ef 92       	push	r14
 680:	df 92       	push	r13
 682:	7b 01       	movw	r14, r22
 684:	8c 01       	movw	r16, r24
 686:	68 94       	set
 688:	05 c0       	rjmp	.+10     	; 0x694 <__fp_powser+0x20>
 68a:	da 2e       	mov	r13, r26
 68c:	ef 01       	movw	r28, r30
 68e:	72 d0       	rcall	.+228    	; 0x774 <__mulsf3x>
 690:	fe 01       	movw	r30, r28
 692:	e8 94       	clt
 694:	a5 91       	lpm	r26, Z+
 696:	25 91       	lpm	r18, Z+
 698:	35 91       	lpm	r19, Z+
 69a:	45 91       	lpm	r20, Z+
 69c:	55 91       	lpm	r21, Z+
 69e:	ae f3       	brts	.-22     	; 0x68a <__fp_powser+0x16>
 6a0:	ef 01       	movw	r28, r30
 6a2:	59 de       	rcall	.-846    	; 0x356 <__addsf3x>
 6a4:	fe 01       	movw	r30, r28
 6a6:	97 01       	movw	r18, r14
 6a8:	a8 01       	movw	r20, r16
 6aa:	da 94       	dec	r13
 6ac:	79 f7       	brne	.-34     	; 0x68c <__fp_powser+0x18>
 6ae:	df 90       	pop	r13
 6b0:	ef 90       	pop	r14
 6b2:	ff 90       	pop	r15
 6b4:	0f 91       	pop	r16
 6b6:	1f 91       	pop	r17
 6b8:	cf 91       	pop	r28
 6ba:	df 91       	pop	r29
 6bc:	08 95       	ret

000006be <__fp_pscA>:
 6be:	00 24       	eor	r0, r0
 6c0:	0a 94       	dec	r0
 6c2:	16 16       	cp	r1, r22
 6c4:	17 06       	cpc	r1, r23
 6c6:	18 06       	cpc	r1, r24
 6c8:	09 06       	cpc	r0, r25
 6ca:	08 95       	ret

000006cc <__fp_pscB>:
 6cc:	00 24       	eor	r0, r0
 6ce:	0a 94       	dec	r0
 6d0:	12 16       	cp	r1, r18
 6d2:	13 06       	cpc	r1, r19
 6d4:	14 06       	cpc	r1, r20
 6d6:	05 06       	cpc	r0, r21
 6d8:	08 95       	ret

000006da <__fp_round>:
 6da:	09 2e       	mov	r0, r25
 6dc:	03 94       	inc	r0
 6de:	00 0c       	add	r0, r0
 6e0:	11 f4       	brne	.+4      	; 0x6e6 <__fp_round+0xc>
 6e2:	88 23       	and	r24, r24
 6e4:	52 f0       	brmi	.+20     	; 0x6fa <__fp_round+0x20>
 6e6:	bb 0f       	add	r27, r27
 6e8:	40 f4       	brcc	.+16     	; 0x6fa <__fp_round+0x20>
 6ea:	bf 2b       	or	r27, r31
 6ec:	11 f4       	brne	.+4      	; 0x6f2 <__fp_round+0x18>
 6ee:	60 ff       	sbrs	r22, 0
 6f0:	04 c0       	rjmp	.+8      	; 0x6fa <__fp_round+0x20>
 6f2:	6f 5f       	subi	r22, 0xFF	; 255
 6f4:	7f 4f       	sbci	r23, 0xFF	; 255
 6f6:	8f 4f       	sbci	r24, 0xFF	; 255
 6f8:	9f 4f       	sbci	r25, 0xFF	; 255
 6fa:	08 95       	ret

000006fc <__fp_split3>:
 6fc:	57 fd       	sbrc	r21, 7
 6fe:	90 58       	subi	r25, 0x80	; 128
 700:	44 0f       	add	r20, r20
 702:	55 1f       	adc	r21, r21
 704:	59 f0       	breq	.+22     	; 0x71c <__fp_splitA+0x10>
 706:	5f 3f       	cpi	r21, 0xFF	; 255
 708:	71 f0       	breq	.+28     	; 0x726 <__fp_splitA+0x1a>
 70a:	47 95       	ror	r20

0000070c <__fp_splitA>:
 70c:	88 0f       	add	r24, r24
 70e:	97 fb       	bst	r25, 7
 710:	99 1f       	adc	r25, r25
 712:	61 f0       	breq	.+24     	; 0x72c <__fp_splitA+0x20>
 714:	9f 3f       	cpi	r25, 0xFF	; 255
 716:	79 f0       	breq	.+30     	; 0x736 <__fp_splitA+0x2a>
 718:	87 95       	ror	r24
 71a:	08 95       	ret
 71c:	12 16       	cp	r1, r18
 71e:	13 06       	cpc	r1, r19
 720:	14 06       	cpc	r1, r20
 722:	55 1f       	adc	r21, r21
 724:	f2 cf       	rjmp	.-28     	; 0x70a <__fp_split3+0xe>
 726:	46 95       	lsr	r20
 728:	f1 df       	rcall	.-30     	; 0x70c <__fp_splitA>
 72a:	08 c0       	rjmp	.+16     	; 0x73c <__fp_splitA+0x30>
 72c:	16 16       	cp	r1, r22
 72e:	17 06       	cpc	r1, r23
 730:	18 06       	cpc	r1, r24
 732:	99 1f       	adc	r25, r25
 734:	f1 cf       	rjmp	.-30     	; 0x718 <__fp_splitA+0xc>
 736:	86 95       	lsr	r24
 738:	71 05       	cpc	r23, r1
 73a:	61 05       	cpc	r22, r1
 73c:	08 94       	sec
 73e:	08 95       	ret

00000740 <__fp_zero>:
 740:	e8 94       	clt

00000742 <__fp_szero>:
 742:	bb 27       	eor	r27, r27
 744:	66 27       	eor	r22, r22
 746:	77 27       	eor	r23, r23
 748:	cb 01       	movw	r24, r22
 74a:	97 f9       	bld	r25, 7
 74c:	08 95       	ret

0000074e <inverse>:
 74e:	9b 01       	movw	r18, r22
 750:	ac 01       	movw	r20, r24
 752:	60 e0       	ldi	r22, 0x00	; 0
 754:	70 e0       	ldi	r23, 0x00	; 0
 756:	80 e8       	ldi	r24, 0x80	; 128
 758:	9f e3       	ldi	r25, 0x3F	; 63
 75a:	b2 ce       	rjmp	.-668    	; 0x4c0 <__divsf3>

0000075c <__mulsf3>:
 75c:	0b d0       	rcall	.+22     	; 0x774 <__mulsf3x>
 75e:	bd cf       	rjmp	.-134    	; 0x6da <__fp_round>
 760:	ae df       	rcall	.-164    	; 0x6be <__fp_pscA>
 762:	28 f0       	brcs	.+10     	; 0x76e <__mulsf3+0x12>
 764:	b3 df       	rcall	.-154    	; 0x6cc <__fp_pscB>
 766:	18 f0       	brcs	.+6      	; 0x76e <__mulsf3+0x12>
 768:	95 23       	and	r25, r21
 76a:	09 f0       	breq	.+2      	; 0x76e <__mulsf3+0x12>
 76c:	7a cf       	rjmp	.-268    	; 0x662 <__fp_inf>
 76e:	7f cf       	rjmp	.-258    	; 0x66e <__fp_nan>
 770:	11 24       	eor	r1, r1
 772:	e7 cf       	rjmp	.-50     	; 0x742 <__fp_szero>

00000774 <__mulsf3x>:
 774:	c3 df       	rcall	.-122    	; 0x6fc <__fp_split3>
 776:	a0 f3       	brcs	.-24     	; 0x760 <__mulsf3+0x4>

00000778 <__mulsf3_pse>:
 778:	95 9f       	mul	r25, r21
 77a:	d1 f3       	breq	.-12     	; 0x770 <__mulsf3+0x14>
 77c:	95 0f       	add	r25, r21
 77e:	50 e0       	ldi	r21, 0x00	; 0
 780:	55 1f       	adc	r21, r21
 782:	62 9f       	mul	r22, r18
 784:	f0 01       	movw	r30, r0
 786:	72 9f       	mul	r23, r18
 788:	bb 27       	eor	r27, r27
 78a:	f0 0d       	add	r31, r0
 78c:	b1 1d       	adc	r27, r1
 78e:	63 9f       	mul	r22, r19
 790:	aa 27       	eor	r26, r26
 792:	f0 0d       	add	r31, r0
 794:	b1 1d       	adc	r27, r1
 796:	aa 1f       	adc	r26, r26
 798:	64 9f       	mul	r22, r20
 79a:	66 27       	eor	r22, r22
 79c:	b0 0d       	add	r27, r0
 79e:	a1 1d       	adc	r26, r1
 7a0:	66 1f       	adc	r22, r22
 7a2:	82 9f       	mul	r24, r18
 7a4:	22 27       	eor	r18, r18
 7a6:	b0 0d       	add	r27, r0
 7a8:	a1 1d       	adc	r26, r1
 7aa:	62 1f       	adc	r22, r18
 7ac:	73 9f       	mul	r23, r19
 7ae:	b0 0d       	add	r27, r0
 7b0:	a1 1d       	adc	r26, r1
 7b2:	62 1f       	adc	r22, r18
 7b4:	83 9f       	mul	r24, r19
 7b6:	a0 0d       	add	r26, r0
 7b8:	61 1d       	adc	r22, r1
 7ba:	22 1f       	adc	r18, r18
 7bc:	74 9f       	mul	r23, r20
 7be:	33 27       	eor	r19, r19
 7c0:	a0 0d       	add	r26, r0
 7c2:	61 1d       	adc	r22, r1
 7c4:	23 1f       	adc	r18, r19
 7c6:	84 9f       	mul	r24, r20
 7c8:	60 0d       	add	r22, r0
 7ca:	21 1d       	adc	r18, r1
 7cc:	82 2f       	mov	r24, r18
 7ce:	76 2f       	mov	r23, r22
 7d0:	6a 2f       	mov	r22, r26
 7d2:	11 24       	eor	r1, r1
 7d4:	9f 57       	subi	r25, 0x7F	; 127
 7d6:	50 40       	sbci	r21, 0x00	; 0
 7d8:	8a f0       	brmi	.+34     	; 0x7fc <__mulsf3_pse+0x84>
 7da:	e1 f0       	breq	.+56     	; 0x814 <__mulsf3_pse+0x9c>
 7dc:	88 23       	and	r24, r24
 7de:	4a f0       	brmi	.+18     	; 0x7f2 <__mulsf3_pse+0x7a>
 7e0:	ee 0f       	add	r30, r30
 7e2:	ff 1f       	adc	r31, r31
 7e4:	bb 1f       	adc	r27, r27
 7e6:	66 1f       	adc	r22, r22
 7e8:	77 1f       	adc	r23, r23
 7ea:	88 1f       	adc	r24, r24
 7ec:	91 50       	subi	r25, 0x01	; 1
 7ee:	50 40       	sbci	r21, 0x00	; 0
 7f0:	a9 f7       	brne	.-22     	; 0x7dc <__mulsf3_pse+0x64>
 7f2:	9e 3f       	cpi	r25, 0xFE	; 254
 7f4:	51 05       	cpc	r21, r1
 7f6:	70 f0       	brcs	.+28     	; 0x814 <__mulsf3_pse+0x9c>
 7f8:	34 cf       	rjmp	.-408    	; 0x662 <__fp_inf>
 7fa:	a3 cf       	rjmp	.-186    	; 0x742 <__fp_szero>
 7fc:	5f 3f       	cpi	r21, 0xFF	; 255
 7fe:	ec f3       	brlt	.-6      	; 0x7fa <__mulsf3_pse+0x82>
 800:	98 3e       	cpi	r25, 0xE8	; 232
 802:	dc f3       	brlt	.-10     	; 0x7fa <__mulsf3_pse+0x82>
 804:	86 95       	lsr	r24
 806:	77 95       	ror	r23
 808:	67 95       	ror	r22
 80a:	b7 95       	ror	r27
 80c:	f7 95       	ror	r31
 80e:	e7 95       	ror	r30
 810:	9f 5f       	subi	r25, 0xFF	; 255
 812:	c1 f7       	brne	.-16     	; 0x804 <__mulsf3_pse+0x8c>
 814:	fe 2b       	or	r31, r30
 816:	88 0f       	add	r24, r24
 818:	91 1d       	adc	r25, r1
 81a:	96 95       	lsr	r25
 81c:	87 95       	ror	r24
 81e:	97 f9       	bld	r25, 7
 820:	08 95       	ret

00000822 <square>:
 822:	9b 01       	movw	r18, r22
 824:	ac 01       	movw	r20, r24
 826:	9a cf       	rjmp	.-204    	; 0x75c <__mulsf3>

00000828 <_exit>:
 828:	f8 94       	cli

0000082a <__stop_program>:
 82a:	ff cf       	rjmp	.-2      	; 0x82a <__stop_program>
