
color_sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000258  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000204  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000288  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000002fc  00000000  00000000  0000032c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001ae  00000000  00000000  00000628  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000029d  00000000  00000000  000007d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d8  00000000  00000000  00000a74  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000219  00000000  00000000  00000b4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000024e  00000000  00000000  00000d65  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00000fb3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	b2 c0       	rjmp	.+356    	; 0x200 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:

int main(void)
{
	//sensor_init();
	
	USART_Init(12,1);
  9e:	61 e0       	ldi	r22, 0x01	; 1
  a0:	8c e0       	ldi	r24, 0x0C	; 12
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	07 d0       	rcall	.+14     	; 0xb4 <USART_Init>
	
	
	while(1)
	{
		USART_TransmitNumber(100,1);
  a6:	41 e0       	ldi	r20, 0x01	; 1
  a8:	64 e6       	ldi	r22, 0x64	; 100
  aa:	70 e0       	ldi	r23, 0x00	; 0
  ac:	80 e0       	ldi	r24, 0x00	; 0
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	2d d0       	rcall	.+90     	; 0x10c <USART_TransmitNumber>
		colour_detect1(r); 
		New_Line(0);
		
		*/

	}
  b2:	f9 cf       	rjmp	.-14     	; 0xa6 <main+0x8>

000000b4 <USART_Init>:
	 {
		 USART_Transmitchar(*str,n);
		 //_delay_ms(1);
		 str++;
	 }
}
  b4:	78 94       	sei
  b6:	66 23       	and	r22, r22
  b8:	79 f0       	breq	.+30     	; 0xd8 <USART_Init+0x24>
  ba:	90 93 98 00 	sts	0x0098, r25
  be:	80 93 99 00 	sts	0x0099, r24
  c2:	ea e9       	ldi	r30, 0x9A	; 154
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	88 61       	ori	r24, 0x18	; 24
  ca:	80 83       	st	Z, r24
  cc:	ed e9       	ldi	r30, 0x9D	; 157
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	86 60       	ori	r24, 0x06	; 6
  d4:	80 83       	st	Z, r24
  d6:	08 95       	ret
  d8:	90 93 90 00 	sts	0x0090, r25
  dc:	89 b9       	out	0x09, r24	; 9
  de:	8a b1       	in	r24, 0x0a	; 10
  e0:	88 61       	ori	r24, 0x18	; 24
  e2:	8a b9       	out	0x0a, r24	; 10
  e4:	e5 e9       	ldi	r30, 0x95	; 149
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	86 60       	ori	r24, 0x06	; 6
  ec:	80 83       	st	Z, r24
  ee:	08 95       	ret

000000f0 <USART_Transmitchar>:
  f0:	66 23       	and	r22, r22
  f2:	41 f0       	breq	.+16     	; 0x104 <USART_Transmitchar+0x14>
  f4:	eb e9       	ldi	r30, 0x9B	; 155
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	90 81       	ld	r25, Z
  fa:	95 ff       	sbrs	r25, 5
  fc:	fd cf       	rjmp	.-6      	; 0xf8 <USART_Transmitchar+0x8>
  fe:	80 93 9c 00 	sts	0x009C, r24
 102:	08 95       	ret
 104:	5d 9b       	sbis	0x0b, 5	; 11
 106:	fe cf       	rjmp	.-4      	; 0x104 <USART_Transmitchar+0x14>
 108:	8c b9       	out	0x0c, r24	; 12
 10a:	08 95       	ret

0000010c <USART_TransmitNumber>:

void USART_TransmitNumber(long int num, uint8_t n)
{
 10c:	bf 92       	push	r11
 10e:	cf 92       	push	r12
 110:	df 92       	push	r13
 112:	ef 92       	push	r14
 114:	ff 92       	push	r15
 116:	0f 93       	push	r16
 118:	1f 93       	push	r17
 11a:	cf 93       	push	r28
 11c:	df 93       	push	r29
 11e:	6b 01       	movw	r12, r22
 120:	7c 01       	movw	r14, r24
 122:	c4 2f       	mov	r28, r20
	if(num<0)
 124:	99 23       	and	r25, r25
 126:	5c f4       	brge	.+22     	; 0x13e <USART_TransmitNumber+0x32>
	{
		USART_Transmitchar('-',n);
 128:	64 2f       	mov	r22, r20
 12a:	8d e2       	ldi	r24, 0x2D	; 45
 12c:	e1 df       	rcall	.-62     	; 0xf0 <USART_Transmitchar>
		num=(-1)*num;
 12e:	f0 94       	com	r15
 130:	e0 94       	com	r14
 132:	d0 94       	com	r13
 134:	c0 94       	com	r12
 136:	c1 1c       	adc	r12, r1
 138:	d1 1c       	adc	r13, r1
 13a:	e1 1c       	adc	r14, r1
 13c:	f1 1c       	adc	r15, r1
	}
	
	if(num >= 10){
 13e:	8a e0       	ldi	r24, 0x0A	; 10
 140:	c8 16       	cp	r12, r24
 142:	d1 04       	cpc	r13, r1
 144:	e1 04       	cpc	r14, r1
 146:	f1 04       	cpc	r15, r1
 148:	7c f0       	brlt	.+30     	; 0x168 <USART_TransmitNumber+0x5c>
    USART_TransmitNumber(num/10,n);
 14a:	c7 01       	movw	r24, r14
 14c:	b6 01       	movw	r22, r12
 14e:	2a e0       	ldi	r18, 0x0A	; 10
 150:	30 e0       	ldi	r19, 0x00	; 0
 152:	40 e0       	ldi	r20, 0x00	; 0
 154:	50 e0       	ldi	r21, 0x00	; 0
 156:	16 d0       	rcall	.+44     	; 0x184 <__divmodsi4>
 158:	69 01       	movw	r12, r18
 15a:	7a 01       	movw	r14, r20
 15c:	b6 2e       	mov	r11, r22
 15e:	4c 2f       	mov	r20, r28
 160:	c7 01       	movw	r24, r14
 162:	b6 01       	movw	r22, r12
 164:	d3 df       	rcall	.-90     	; 0x10c <USART_TransmitNumber>
    num = num%10;
 166:	cb 2c       	mov	r12, r11
  }
  USART_Transmitchar(num+'0',n); /* n is between 0 and 9 */
 168:	6c 2f       	mov	r22, r28
 16a:	80 e3       	ldi	r24, 0x30	; 48
 16c:	8c 0d       	add	r24, r12
 16e:	c0 df       	rcall	.-128    	; 0xf0 <USART_Transmitchar>
	
}
 170:	df 91       	pop	r29
 172:	cf 91       	pop	r28
 174:	1f 91       	pop	r17
 176:	0f 91       	pop	r16
 178:	ff 90       	pop	r15
 17a:	ef 90       	pop	r14
 17c:	df 90       	pop	r13
 17e:	cf 90       	pop	r12
 180:	bf 90       	pop	r11
 182:	08 95       	ret

00000184 <__divmodsi4>:
 184:	05 2e       	mov	r0, r21
 186:	97 fb       	bst	r25, 7
 188:	16 f4       	brtc	.+4      	; 0x18e <__divmodsi4+0xa>
 18a:	00 94       	com	r0
 18c:	0f d0       	rcall	.+30     	; 0x1ac <__negsi2>
 18e:	57 fd       	sbrc	r21, 7
 190:	05 d0       	rcall	.+10     	; 0x19c <__divmodsi4_neg2>
 192:	14 d0       	rcall	.+40     	; 0x1bc <__udivmodsi4>
 194:	07 fc       	sbrc	r0, 7
 196:	02 d0       	rcall	.+4      	; 0x19c <__divmodsi4_neg2>
 198:	46 f4       	brtc	.+16     	; 0x1aa <__divmodsi4_exit>
 19a:	08 c0       	rjmp	.+16     	; 0x1ac <__negsi2>

0000019c <__divmodsi4_neg2>:
 19c:	50 95       	com	r21
 19e:	40 95       	com	r20
 1a0:	30 95       	com	r19
 1a2:	21 95       	neg	r18
 1a4:	3f 4f       	sbci	r19, 0xFF	; 255
 1a6:	4f 4f       	sbci	r20, 0xFF	; 255
 1a8:	5f 4f       	sbci	r21, 0xFF	; 255

000001aa <__divmodsi4_exit>:
 1aa:	08 95       	ret

000001ac <__negsi2>:
 1ac:	90 95       	com	r25
 1ae:	80 95       	com	r24
 1b0:	70 95       	com	r23
 1b2:	61 95       	neg	r22
 1b4:	7f 4f       	sbci	r23, 0xFF	; 255
 1b6:	8f 4f       	sbci	r24, 0xFF	; 255
 1b8:	9f 4f       	sbci	r25, 0xFF	; 255
 1ba:	08 95       	ret

000001bc <__udivmodsi4>:
 1bc:	a1 e2       	ldi	r26, 0x21	; 33
 1be:	1a 2e       	mov	r1, r26
 1c0:	aa 1b       	sub	r26, r26
 1c2:	bb 1b       	sub	r27, r27
 1c4:	fd 01       	movw	r30, r26
 1c6:	0d c0       	rjmp	.+26     	; 0x1e2 <__udivmodsi4_ep>

000001c8 <__udivmodsi4_loop>:
 1c8:	aa 1f       	adc	r26, r26
 1ca:	bb 1f       	adc	r27, r27
 1cc:	ee 1f       	adc	r30, r30
 1ce:	ff 1f       	adc	r31, r31
 1d0:	a2 17       	cp	r26, r18
 1d2:	b3 07       	cpc	r27, r19
 1d4:	e4 07       	cpc	r30, r20
 1d6:	f5 07       	cpc	r31, r21
 1d8:	20 f0       	brcs	.+8      	; 0x1e2 <__udivmodsi4_ep>
 1da:	a2 1b       	sub	r26, r18
 1dc:	b3 0b       	sbc	r27, r19
 1de:	e4 0b       	sbc	r30, r20
 1e0:	f5 0b       	sbc	r31, r21

000001e2 <__udivmodsi4_ep>:
 1e2:	66 1f       	adc	r22, r22
 1e4:	77 1f       	adc	r23, r23
 1e6:	88 1f       	adc	r24, r24
 1e8:	99 1f       	adc	r25, r25
 1ea:	1a 94       	dec	r1
 1ec:	69 f7       	brne	.-38     	; 0x1c8 <__udivmodsi4_loop>
 1ee:	60 95       	com	r22
 1f0:	70 95       	com	r23
 1f2:	80 95       	com	r24
 1f4:	90 95       	com	r25
 1f6:	9b 01       	movw	r18, r22
 1f8:	ac 01       	movw	r20, r24
 1fa:	bd 01       	movw	r22, r26
 1fc:	cf 01       	movw	r24, r30
 1fe:	08 95       	ret

00000200 <_exit>:
 200:	f8 94       	cli

00000202 <__stop_program>:
 202:	ff cf       	rjmp	.-2      	; 0x202 <__stop_program>
