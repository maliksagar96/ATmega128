
ADC_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000264  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001f0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800100  00800100  00000264  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000294  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000108  00000000  00000000  00000300  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000c2  00000000  00000000  00000408  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000018b  00000000  00000000  000004ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000078  00000000  00000000  00000658  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000179  00000000  00000000  000006d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000aa  00000000  00000000  00000849  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  000008f3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4d c0       	rjmp	.+154    	; 0x9c <__ctors_end>
   2:	00 00       	nop
   4:	5b c0       	rjmp	.+182    	; 0xbc <__bad_interrupt>
   6:	00 00       	nop
   8:	59 c0       	rjmp	.+178    	; 0xbc <__bad_interrupt>
   a:	00 00       	nop
   c:	57 c0       	rjmp	.+174    	; 0xbc <__bad_interrupt>
   e:	00 00       	nop
  10:	55 c0       	rjmp	.+170    	; 0xbc <__bad_interrupt>
  12:	00 00       	nop
  14:	53 c0       	rjmp	.+166    	; 0xbc <__bad_interrupt>
  16:	00 00       	nop
  18:	51 c0       	rjmp	.+162    	; 0xbc <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4f c0       	rjmp	.+158    	; 0xbc <__bad_interrupt>
  1e:	00 00       	nop
  20:	4d c0       	rjmp	.+154    	; 0xbc <__bad_interrupt>
  22:	00 00       	nop
  24:	4b c0       	rjmp	.+150    	; 0xbc <__bad_interrupt>
  26:	00 00       	nop
  28:	49 c0       	rjmp	.+146    	; 0xbc <__bad_interrupt>
  2a:	00 00       	nop
  2c:	47 c0       	rjmp	.+142    	; 0xbc <__bad_interrupt>
  2e:	00 00       	nop
  30:	45 c0       	rjmp	.+138    	; 0xbc <__bad_interrupt>
  32:	00 00       	nop
  34:	43 c0       	rjmp	.+134    	; 0xbc <__bad_interrupt>
  36:	00 00       	nop
  38:	41 c0       	rjmp	.+130    	; 0xbc <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3f c0       	rjmp	.+126    	; 0xbc <__bad_interrupt>
  3e:	00 00       	nop
  40:	3d c0       	rjmp	.+122    	; 0xbc <__bad_interrupt>
  42:	00 00       	nop
  44:	3b c0       	rjmp	.+118    	; 0xbc <__bad_interrupt>
  46:	00 00       	nop
  48:	39 c0       	rjmp	.+114    	; 0xbc <__bad_interrupt>
  4a:	00 00       	nop
  4c:	37 c0       	rjmp	.+110    	; 0xbc <__bad_interrupt>
  4e:	00 00       	nop
  50:	35 c0       	rjmp	.+106    	; 0xbc <__bad_interrupt>
  52:	00 00       	nop
  54:	3e c0       	rjmp	.+124    	; 0xd2 <__vector_21>
  56:	00 00       	nop
  58:	31 c0       	rjmp	.+98     	; 0xbc <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2f c0       	rjmp	.+94     	; 0xbc <__bad_interrupt>
  5e:	00 00       	nop
  60:	2d c0       	rjmp	.+90     	; 0xbc <__bad_interrupt>
  62:	00 00       	nop
  64:	2b c0       	rjmp	.+86     	; 0xbc <__bad_interrupt>
  66:	00 00       	nop
  68:	29 c0       	rjmp	.+82     	; 0xbc <__bad_interrupt>
  6a:	00 00       	nop
  6c:	27 c0       	rjmp	.+78     	; 0xbc <__bad_interrupt>
  6e:	00 00       	nop
  70:	25 c0       	rjmp	.+74     	; 0xbc <__bad_interrupt>
  72:	00 00       	nop
  74:	23 c0       	rjmp	.+70     	; 0xbc <__bad_interrupt>
  76:	00 00       	nop
  78:	21 c0       	rjmp	.+66     	; 0xbc <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1f c0       	rjmp	.+62     	; 0xbc <__bad_interrupt>
  7e:	00 00       	nop
  80:	1d c0       	rjmp	.+58     	; 0xbc <__bad_interrupt>
  82:	00 00       	nop
  84:	1b c0       	rjmp	.+54     	; 0xbc <__bad_interrupt>
  86:	00 00       	nop
  88:	19 c0       	rjmp	.+50     	; 0xbc <__bad_interrupt>
  8a:	00 00       	nop
  8c:	86 00       	.word	0x0086	; ????
  8e:	91 00       	.word	0x0091	; ????
  90:	9c 00       	.word	0x009c	; ????
  92:	a7 00       	.word	0x00a7	; ????
  94:	b2 00       	.word	0x00b2	; ????
  96:	bd 00       	.word	0x00bd	; ????
  98:	c8 00       	.word	0x00c8	; ????
  9a:	d3 00       	.word	0x00d3	; ????

0000009c <__ctors_end>:
  9c:	11 24       	eor	r1, r1
  9e:	1f be       	out	0x3f, r1	; 63
  a0:	cf ef       	ldi	r28, 0xFF	; 255
  a2:	d0 e1       	ldi	r29, 0x10	; 16
  a4:	de bf       	out	0x3e, r29	; 62
  a6:	cd bf       	out	0x3d, r28	; 61

000000a8 <__do_clear_bss>:
  a8:	21 e0       	ldi	r18, 0x01	; 1
  aa:	a0 e0       	ldi	r26, 0x00	; 0
  ac:	b1 e0       	ldi	r27, 0x01	; 1
  ae:	01 c0       	rjmp	.+2      	; 0xb2 <.do_clear_bss_start>

000000b0 <.do_clear_bss_loop>:
  b0:	1d 92       	st	X+, r1

000000b2 <.do_clear_bss_start>:
  b2:	ae 30       	cpi	r26, 0x0E	; 14
  b4:	b2 07       	cpc	r27, r18
  b6:	e1 f7       	brne	.-8      	; 0xb0 <.do_clear_bss_loop>
  b8:	0a d0       	rcall	.+20     	; 0xce <main>
  ba:	98 c0       	rjmp	.+304    	; 0x1ec <_exit>

000000bc <__bad_interrupt>:
  bc:	a1 cf       	rjmp	.-190    	; 0x0 <__vectors>

000000be <ADC_Init>:

uint16_t ADC_Result[7]; 

void ADC_Init()
{
	ADCSRA |=(1<<ADPS2);
  be:	32 9a       	sbi	0x06, 2	; 6
	ADMUX |=(1<<REFS0);
  c0:	3e 9a       	sbi	0x07, 6	; 7
	ADCSRA |=(1<<ADIE)|(1<<ADEN);
  c2:	86 b1       	in	r24, 0x06	; 6
  c4:	88 68       	ori	r24, 0x88	; 136
  c6:	86 b9       	out	0x06, r24	; 6
	sei();
  c8:	78 94       	sei
	ADCSRA |=(1<<ADSC);
  ca:	36 9a       	sbi	0x06, 6	; 6
  cc:	08 95       	ret

000000ce <main>:
}

int main(void)
{
	ADC_Init();
  ce:	f7 df       	rcall	.-18     	; 0xbe <ADC_Init>
    while (1) 
    {
    }
  d0:	ff cf       	rjmp	.-2      	; 0xd0 <main+0x2>

000000d2 <__vector_21>:
}

ISR(ADC_vect)
{
  d2:	1f 92       	push	r1
  d4:	0f 92       	push	r0
  d6:	0f b6       	in	r0, 0x3f	; 63
  d8:	0f 92       	push	r0
  da:	11 24       	eor	r1, r1
  dc:	0b b6       	in	r0, 0x3b	; 59
  de:	0f 92       	push	r0
  e0:	2f 93       	push	r18
  e2:	3f 93       	push	r19
  e4:	8f 93       	push	r24
  e6:	9f 93       	push	r25
  e8:	af 93       	push	r26
  ea:	bf 93       	push	r27
  ec:	ef 93       	push	r30
  ee:	ff 93       	push	r31
	uint8_t theLow=ADCL;
  f0:	24 b1       	in	r18, 0x04	; 4
	switch(ADMUX)
  f2:	e7 b1       	in	r30, 0x07	; 7
  f4:	8e 2f       	mov	r24, r30
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	fc 01       	movw	r30, r24
  fa:	e0 54       	subi	r30, 0x40	; 64
  fc:	f1 09       	sbc	r31, r1
  fe:	e8 30       	cpi	r30, 0x08	; 8
 100:	f1 05       	cpc	r31, r1
 102:	08 f0       	brcs	.+2      	; 0x106 <__vector_21+0x34>
 104:	5a c0       	rjmp	.+180    	; 0x1ba <__vector_21+0xe8>
 106:	ea 5b       	subi	r30, 0xBA	; 186
 108:	ff 4f       	sbci	r31, 0xFF	; 255
 10a:	67 c0       	rjmp	.+206    	; 0x1da <__tablejump2__>
	{
		case 0b01000000 :
							ADC_Result[0] = (ADCH<<8|theLow);
 10c:	35 b1       	in	r19, 0x05	; 5
 10e:	82 2f       	mov	r24, r18
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	93 2b       	or	r25, r19
 114:	90 93 01 01 	sts	0x0101, r25
 118:	80 93 00 01 	sts	0x0100, r24
							ADMUX = 0b01000001;
 11c:	81 e4       	ldi	r24, 0x41	; 65
 11e:	87 b9       	out	0x07, r24	; 7
							break;
 120:	4c c0       	rjmp	.+152    	; 0x1ba <__vector_21+0xe8>
		case 0b01000001 :
							ADC_Result[1] = (ADCH<<8|theLow);
 122:	35 b1       	in	r19, 0x05	; 5
 124:	82 2f       	mov	r24, r18
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	93 2b       	or	r25, r19
 12a:	90 93 03 01 	sts	0x0103, r25
 12e:	80 93 02 01 	sts	0x0102, r24
							ADMUX = 0b01000010;
 132:	82 e4       	ldi	r24, 0x42	; 66
 134:	87 b9       	out	0x07, r24	; 7
							break;
 136:	41 c0       	rjmp	.+130    	; 0x1ba <__vector_21+0xe8>
		case 0b01000010 :
							ADC_Result[2] = (ADCH<<8|theLow);
 138:	35 b1       	in	r19, 0x05	; 5
 13a:	82 2f       	mov	r24, r18
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	93 2b       	or	r25, r19
 140:	90 93 05 01 	sts	0x0105, r25
 144:	80 93 04 01 	sts	0x0104, r24
							ADMUX = 0b01000011;
 148:	83 e4       	ldi	r24, 0x43	; 67
 14a:	87 b9       	out	0x07, r24	; 7
							break;
 14c:	36 c0       	rjmp	.+108    	; 0x1ba <__vector_21+0xe8>
		case 0b01000011 :
							ADC_Result[3] = (ADCH<<8|theLow);
 14e:	35 b1       	in	r19, 0x05	; 5
 150:	82 2f       	mov	r24, r18
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	93 2b       	or	r25, r19
 156:	90 93 07 01 	sts	0x0107, r25
 15a:	80 93 06 01 	sts	0x0106, r24
							ADMUX = 0b01000100;
 15e:	84 e4       	ldi	r24, 0x44	; 68
 160:	87 b9       	out	0x07, r24	; 7
							break;
 162:	2b c0       	rjmp	.+86     	; 0x1ba <__vector_21+0xe8>
		case 0b01000100 :
							ADC_Result[4] = (ADCH<<8|theLow);
 164:	35 b1       	in	r19, 0x05	; 5
 166:	82 2f       	mov	r24, r18
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	93 2b       	or	r25, r19
 16c:	90 93 09 01 	sts	0x0109, r25
 170:	80 93 08 01 	sts	0x0108, r24
							ADMUX = 0b01000101;
 174:	85 e4       	ldi	r24, 0x45	; 69
 176:	87 b9       	out	0x07, r24	; 7
							break;
 178:	20 c0       	rjmp	.+64     	; 0x1ba <__vector_21+0xe8>
		case 0b01000101 :
							ADC_Result[5] = (ADCH<<8|theLow);
 17a:	35 b1       	in	r19, 0x05	; 5
 17c:	82 2f       	mov	r24, r18
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	93 2b       	or	r25, r19
 182:	90 93 0b 01 	sts	0x010B, r25
 186:	80 93 0a 01 	sts	0x010A, r24
							ADMUX = 0b01000110;
 18a:	86 e4       	ldi	r24, 0x46	; 70
 18c:	87 b9       	out	0x07, r24	; 7
							break;
 18e:	15 c0       	rjmp	.+42     	; 0x1ba <__vector_21+0xe8>
		case 0b01000110 :
							ADC_Result[6] = (ADCH<<8|theLow);
 190:	35 b1       	in	r19, 0x05	; 5
 192:	82 2f       	mov	r24, r18
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	93 2b       	or	r25, r19
 198:	90 93 0d 01 	sts	0x010D, r25
 19c:	80 93 0c 01 	sts	0x010C, r24
							ADMUX = 0b01000111;
 1a0:	87 e4       	ldi	r24, 0x47	; 71
 1a2:	87 b9       	out	0x07, r24	; 7
							break;
 1a4:	0a c0       	rjmp	.+20     	; 0x1ba <__vector_21+0xe8>
		case 0b01000111 :
							ADC_Result[7] = (ADCH<<8|theLow);
 1a6:	35 b1       	in	r19, 0x05	; 5
 1a8:	82 2f       	mov	r24, r18
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	93 2b       	or	r25, r19
 1ae:	90 93 0f 01 	sts	0x010F, r25
 1b2:	80 93 0e 01 	sts	0x010E, r24
							ADMUX = 0b01000000;
 1b6:	80 e4       	ldi	r24, 0x40	; 64
 1b8:	87 b9       	out	0x07, r24	; 7
							break;
	}
	ADCSRA |=(1<<ADSC);
 1ba:	36 9a       	sbi	0x06, 6	; 6
}
 1bc:	ff 91       	pop	r31
 1be:	ef 91       	pop	r30
 1c0:	bf 91       	pop	r27
 1c2:	af 91       	pop	r26
 1c4:	9f 91       	pop	r25
 1c6:	8f 91       	pop	r24
 1c8:	3f 91       	pop	r19
 1ca:	2f 91       	pop	r18
 1cc:	0f 90       	pop	r0
 1ce:	0b be       	out	0x3b, r0	; 59
 1d0:	0f 90       	pop	r0
 1d2:	0f be       	out	0x3f, r0	; 63
 1d4:	0f 90       	pop	r0
 1d6:	1f 90       	pop	r1
 1d8:	18 95       	reti

000001da <__tablejump2__>:
 1da:	ee 0f       	add	r30, r30
 1dc:	ff 1f       	adc	r31, r31
 1de:	00 24       	eor	r0, r0
 1e0:	00 1c       	adc	r0, r0
 1e2:	0b be       	out	0x3b, r0	; 59
 1e4:	07 90       	elpm	r0, Z+
 1e6:	f6 91       	elpm	r31, Z
 1e8:	e0 2d       	mov	r30, r0
 1ea:	09 94       	ijmp

000001ec <_exit>:
 1ec:	f8 94       	cli

000001ee <__stop_program>:
 1ee:	ff cf       	rjmp	.-2      	; 0x1ee <__stop_program>
