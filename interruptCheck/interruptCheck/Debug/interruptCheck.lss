
interruptCheck.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000002c6  0000035a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002c6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800102  00800102  0000035c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000035c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000038c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  000003c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000367  00000000  00000000  00000438  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001eb  00000000  00000000  0000079f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002dc  00000000  00000000  0000098a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000130  00000000  00000000  00000c68  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001de  00000000  00000000  00000d98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000319  00000000  00000000  00000f76  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000128f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	77 c0       	rjmp	.+238    	; 0xf8 <__vector_2>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 ec       	ldi	r30, 0xC6	; 198
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e0       	ldi	r26, 0x02	; 2
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 30       	cpi	r26, 0x04	; 4
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	02 d0       	rcall	.+4      	; 0xc8 <main>
  c4:	fe c0       	rjmp	.+508    	; 0x2c2 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <main>:
int a = 0;	
volatile int n = 1;
	
int main(void) {

    USART_Init(12,1);
  c8:	61 e0       	ldi	r22, 0x01	; 1
  ca:	8c e0       	ldi	r24, 0x0C	; 12
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	53 d0       	rcall	.+166    	; 0x176 <USART_Init>
	EIMSK = 0b11110011;
  d0:	83 ef       	ldi	r24, 0xF3	; 243
  d2:	89 bf       	out	0x39, r24	; 57
	EICRA |= 0xff;
  d4:	ea e6       	ldi	r30, 0x6A	; 106
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 81       	ld	r24, Z
  da:	8f ef       	ldi	r24, 0xFF	; 255
  dc:	80 83       	st	Z, r24
	EICRB |= 0xff;
  de:	9a b7       	in	r25, 0x3a	; 58
  e0:	8a bf       	out	0x3a, r24	; 58
	sei();
  e2:	78 94       	sei
 
	while (1) {
	
  	USART_TransmitNumber(1,n);
  e4:	40 91 00 01 	lds	r20, 0x0100
  e8:	50 91 01 01 	lds	r21, 0x0101
  ec:	61 e0       	ldi	r22, 0x01	; 1
  ee:	70 e0       	ldi	r23, 0x00	; 0
  f0:	80 e0       	ldi	r24, 0x00	; 0
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	6c d0       	rcall	.+216    	; 0x1ce <USART_TransmitNumber>
	
	}
  f6:	f6 cf       	rjmp	.-20     	; 0xe4 <main+0x1c>

000000f8 <__vector_2>:
USART_TransmitNumber(a,1);
USART_Transmitchar(0x0D,1);
}
*/

ISR(INT1_vect) {
  f8:	1f 92       	push	r1
  fa:	0f 92       	push	r0
  fc:	0f b6       	in	r0, 0x3f	; 63
  fe:	0f 92       	push	r0
 100:	11 24       	eor	r1, r1
 102:	0b b6       	in	r0, 0x3b	; 59
 104:	0f 92       	push	r0
 106:	2f 93       	push	r18
 108:	3f 93       	push	r19
 10a:	4f 93       	push	r20
 10c:	5f 93       	push	r21
 10e:	6f 93       	push	r22
 110:	7f 93       	push	r23
 112:	8f 93       	push	r24
 114:	9f 93       	push	r25
 116:	af 93       	push	r26
 118:	bf 93       	push	r27
 11a:	ef 93       	push	r30
 11c:	ff 93       	push	r31
	a++;
 11e:	60 91 02 01 	lds	r22, 0x0102
 122:	70 91 03 01 	lds	r23, 0x0103
 126:	6f 5f       	subi	r22, 0xFF	; 255
 128:	7f 4f       	sbci	r23, 0xFF	; 255
 12a:	70 93 03 01 	sts	0x0103, r23
 12e:	60 93 02 01 	sts	0x0102, r22
USART_TransmitNumber(a,n);
 132:	40 91 00 01 	lds	r20, 0x0100
 136:	50 91 01 01 	lds	r21, 0x0101
 13a:	07 2e       	mov	r0, r23
 13c:	00 0c       	add	r0, r0
 13e:	88 0b       	sbc	r24, r24
 140:	99 0b       	sbc	r25, r25
 142:	45 d0       	rcall	.+138    	; 0x1ce <USART_TransmitNumber>
USART_Transmitchar(0x0D,n);
 144:	60 91 00 01 	lds	r22, 0x0100
 148:	70 91 01 01 	lds	r23, 0x0101
 14c:	8d e0       	ldi	r24, 0x0D	; 13
 14e:	31 d0       	rcall	.+98     	; 0x1b2 <USART_Transmitchar>

}
 150:	ff 91       	pop	r31
 152:	ef 91       	pop	r30
 154:	bf 91       	pop	r27
 156:	af 91       	pop	r26
 158:	9f 91       	pop	r25
 15a:	8f 91       	pop	r24
 15c:	7f 91       	pop	r23
 15e:	6f 91       	pop	r22
 160:	5f 91       	pop	r21
 162:	4f 91       	pop	r20
 164:	3f 91       	pop	r19
 166:	2f 91       	pop	r18
 168:	0f 90       	pop	r0
 16a:	0b be       	out	0x3b, r0	; 59
 16c:	0f 90       	pop	r0
 16e:	0f be       	out	0x3f, r0	; 63
 170:	0f 90       	pop	r0
 172:	1f 90       	pop	r1
 174:	18 95       	reti

00000176 <USART_Init>:
	 {
		 USART_Transmitchar(*str,n);
		 //_delay_ms(1);
		 str++;
	 }
}
 176:	78 94       	sei
 178:	66 23       	and	r22, r22
 17a:	79 f0       	breq	.+30     	; 0x19a <USART_Init+0x24>
 17c:	90 93 98 00 	sts	0x0098, r25
 180:	80 93 99 00 	sts	0x0099, r24
 184:	ea e9       	ldi	r30, 0x9A	; 154
 186:	f0 e0       	ldi	r31, 0x00	; 0
 188:	80 81       	ld	r24, Z
 18a:	88 61       	ori	r24, 0x18	; 24
 18c:	80 83       	st	Z, r24
 18e:	ed e9       	ldi	r30, 0x9D	; 157
 190:	f0 e0       	ldi	r31, 0x00	; 0
 192:	80 81       	ld	r24, Z
 194:	86 60       	ori	r24, 0x06	; 6
 196:	80 83       	st	Z, r24
 198:	08 95       	ret
 19a:	90 93 90 00 	sts	0x0090, r25
 19e:	89 b9       	out	0x09, r24	; 9
 1a0:	8a b1       	in	r24, 0x0a	; 10
 1a2:	88 61       	ori	r24, 0x18	; 24
 1a4:	8a b9       	out	0x0a, r24	; 10
 1a6:	e5 e9       	ldi	r30, 0x95	; 149
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	80 81       	ld	r24, Z
 1ac:	86 60       	ori	r24, 0x06	; 6
 1ae:	80 83       	st	Z, r24
 1b0:	08 95       	ret

000001b2 <USART_Transmitchar>:
 1b2:	66 23       	and	r22, r22
 1b4:	41 f0       	breq	.+16     	; 0x1c6 <USART_Transmitchar+0x14>
 1b6:	eb e9       	ldi	r30, 0x9B	; 155
 1b8:	f0 e0       	ldi	r31, 0x00	; 0
 1ba:	90 81       	ld	r25, Z
 1bc:	95 ff       	sbrs	r25, 5
 1be:	fd cf       	rjmp	.-6      	; 0x1ba <USART_Transmitchar+0x8>
 1c0:	80 93 9c 00 	sts	0x009C, r24
 1c4:	08 95       	ret
 1c6:	5d 9b       	sbis	0x0b, 5	; 11
 1c8:	fe cf       	rjmp	.-4      	; 0x1c6 <USART_Transmitchar+0x14>
 1ca:	8c b9       	out	0x0c, r24	; 12
 1cc:	08 95       	ret

000001ce <USART_TransmitNumber>:

void USART_TransmitNumber(long int num, uint8_t n)
{
 1ce:	bf 92       	push	r11
 1d0:	cf 92       	push	r12
 1d2:	df 92       	push	r13
 1d4:	ef 92       	push	r14
 1d6:	ff 92       	push	r15
 1d8:	0f 93       	push	r16
 1da:	1f 93       	push	r17
 1dc:	cf 93       	push	r28
 1de:	df 93       	push	r29
 1e0:	6b 01       	movw	r12, r22
 1e2:	7c 01       	movw	r14, r24
 1e4:	c4 2f       	mov	r28, r20
	if(num<0)
 1e6:	99 23       	and	r25, r25
 1e8:	5c f4       	brge	.+22     	; 0x200 <USART_TransmitNumber+0x32>
	{
		USART_Transmitchar('-',n);
 1ea:	64 2f       	mov	r22, r20
 1ec:	8d e2       	ldi	r24, 0x2D	; 45
 1ee:	e1 df       	rcall	.-62     	; 0x1b2 <USART_Transmitchar>
		num=(-1)*num;
 1f0:	f0 94       	com	r15
 1f2:	e0 94       	com	r14
 1f4:	d0 94       	com	r13
 1f6:	c0 94       	com	r12
 1f8:	c1 1c       	adc	r12, r1
 1fa:	d1 1c       	adc	r13, r1
 1fc:	e1 1c       	adc	r14, r1
 1fe:	f1 1c       	adc	r15, r1
	}
	
	if(num >= 10){
 200:	8a e0       	ldi	r24, 0x0A	; 10
 202:	c8 16       	cp	r12, r24
 204:	d1 04       	cpc	r13, r1
 206:	e1 04       	cpc	r14, r1
 208:	f1 04       	cpc	r15, r1
 20a:	7c f0       	brlt	.+30     	; 0x22a <USART_TransmitNumber+0x5c>
    USART_TransmitNumber(num/10,n);
 20c:	c7 01       	movw	r24, r14
 20e:	b6 01       	movw	r22, r12
 210:	2a e0       	ldi	r18, 0x0A	; 10
 212:	30 e0       	ldi	r19, 0x00	; 0
 214:	40 e0       	ldi	r20, 0x00	; 0
 216:	50 e0       	ldi	r21, 0x00	; 0
 218:	16 d0       	rcall	.+44     	; 0x246 <__divmodsi4>
 21a:	69 01       	movw	r12, r18
 21c:	7a 01       	movw	r14, r20
 21e:	b6 2e       	mov	r11, r22
 220:	4c 2f       	mov	r20, r28
 222:	c7 01       	movw	r24, r14
 224:	b6 01       	movw	r22, r12
 226:	d3 df       	rcall	.-90     	; 0x1ce <USART_TransmitNumber>
    num = num%10;
 228:	cb 2c       	mov	r12, r11
  }
  USART_Transmitchar(num+'0',n); /* n is between 0 and 9 */
 22a:	6c 2f       	mov	r22, r28
 22c:	80 e3       	ldi	r24, 0x30	; 48
 22e:	8c 0d       	add	r24, r12
 230:	c0 df       	rcall	.-128    	; 0x1b2 <USART_Transmitchar>
	
}
 232:	df 91       	pop	r29
 234:	cf 91       	pop	r28
 236:	1f 91       	pop	r17
 238:	0f 91       	pop	r16
 23a:	ff 90       	pop	r15
 23c:	ef 90       	pop	r14
 23e:	df 90       	pop	r13
 240:	cf 90       	pop	r12
 242:	bf 90       	pop	r11
 244:	08 95       	ret

00000246 <__divmodsi4>:
 246:	05 2e       	mov	r0, r21
 248:	97 fb       	bst	r25, 7
 24a:	16 f4       	brtc	.+4      	; 0x250 <__divmodsi4+0xa>
 24c:	00 94       	com	r0
 24e:	0f d0       	rcall	.+30     	; 0x26e <__negsi2>
 250:	57 fd       	sbrc	r21, 7
 252:	05 d0       	rcall	.+10     	; 0x25e <__divmodsi4_neg2>
 254:	14 d0       	rcall	.+40     	; 0x27e <__udivmodsi4>
 256:	07 fc       	sbrc	r0, 7
 258:	02 d0       	rcall	.+4      	; 0x25e <__divmodsi4_neg2>
 25a:	46 f4       	brtc	.+16     	; 0x26c <__divmodsi4_exit>
 25c:	08 c0       	rjmp	.+16     	; 0x26e <__negsi2>

0000025e <__divmodsi4_neg2>:
 25e:	50 95       	com	r21
 260:	40 95       	com	r20
 262:	30 95       	com	r19
 264:	21 95       	neg	r18
 266:	3f 4f       	sbci	r19, 0xFF	; 255
 268:	4f 4f       	sbci	r20, 0xFF	; 255
 26a:	5f 4f       	sbci	r21, 0xFF	; 255

0000026c <__divmodsi4_exit>:
 26c:	08 95       	ret

0000026e <__negsi2>:
 26e:	90 95       	com	r25
 270:	80 95       	com	r24
 272:	70 95       	com	r23
 274:	61 95       	neg	r22
 276:	7f 4f       	sbci	r23, 0xFF	; 255
 278:	8f 4f       	sbci	r24, 0xFF	; 255
 27a:	9f 4f       	sbci	r25, 0xFF	; 255
 27c:	08 95       	ret

0000027e <__udivmodsi4>:
 27e:	a1 e2       	ldi	r26, 0x21	; 33
 280:	1a 2e       	mov	r1, r26
 282:	aa 1b       	sub	r26, r26
 284:	bb 1b       	sub	r27, r27
 286:	fd 01       	movw	r30, r26
 288:	0d c0       	rjmp	.+26     	; 0x2a4 <__udivmodsi4_ep>

0000028a <__udivmodsi4_loop>:
 28a:	aa 1f       	adc	r26, r26
 28c:	bb 1f       	adc	r27, r27
 28e:	ee 1f       	adc	r30, r30
 290:	ff 1f       	adc	r31, r31
 292:	a2 17       	cp	r26, r18
 294:	b3 07       	cpc	r27, r19
 296:	e4 07       	cpc	r30, r20
 298:	f5 07       	cpc	r31, r21
 29a:	20 f0       	brcs	.+8      	; 0x2a4 <__udivmodsi4_ep>
 29c:	a2 1b       	sub	r26, r18
 29e:	b3 0b       	sbc	r27, r19
 2a0:	e4 0b       	sbc	r30, r20
 2a2:	f5 0b       	sbc	r31, r21

000002a4 <__udivmodsi4_ep>:
 2a4:	66 1f       	adc	r22, r22
 2a6:	77 1f       	adc	r23, r23
 2a8:	88 1f       	adc	r24, r24
 2aa:	99 1f       	adc	r25, r25
 2ac:	1a 94       	dec	r1
 2ae:	69 f7       	brne	.-38     	; 0x28a <__udivmodsi4_loop>
 2b0:	60 95       	com	r22
 2b2:	70 95       	com	r23
 2b4:	80 95       	com	r24
 2b6:	90 95       	com	r25
 2b8:	9b 01       	movw	r18, r22
 2ba:	ac 01       	movw	r20, r24
 2bc:	bd 01       	movw	r22, r26
 2be:	cf 01       	movw	r24, r30
 2c0:	08 95       	ret

000002c2 <_exit>:
 2c2:	f8 94       	cli

000002c4 <__stop_program>:
 2c4:	ff cf       	rjmp	.-2      	; 0x2c4 <__stop_program>
