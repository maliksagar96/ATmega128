
PS2_INTERFACING.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000374  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000038  00800060  00000374  00000408  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000025  00800098  00800098  00000440  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000440  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000470  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  000004ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c02  00000000  00000000  00000574  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004f0  00000000  00000000  00001176  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000478  00000000  00000000  00001666  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a8  00000000  00000000  00001ae0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003a8  00000000  00000000  00001c88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000419  00000000  00000000  00002030  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00002449  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e4 e7       	ldi	r30, 0x74	; 116
  3a:	f3 e0       	ldi	r31, 0x03	; 3
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a8 39       	cpi	r26, 0x98	; 152
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	a8 e9       	ldi	r26, 0x98	; 152
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	ad 3b       	cpi	r26, 0xBD	; 189
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	02 d0       	rcall	.+4      	; 0x5e <main>
  5a:	8a c1       	rjmp	.+788    	; 0x370 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <main>:
int isPressed(uint8_t dataByte, uint8_t dataBit) {
	return ((dataByte & (1 << dataBit)) ? 1 : 0);
}

int main(void) {
	USART_Init(12);
  5e:	8c e0       	ldi	r24, 0x0C	; 12
  60:	90 e0       	ldi	r25, 0x00	; 0
  62:	30 d1       	rcall	.+608    	; 0x2c4 <USART_Init>
	USART_TransmitString("Up and running");
  64:	89 e8       	ldi	r24, 0x89	; 137
  66:	90 e0       	ldi	r25, 0x00	; 0
  68:	38 d1       	rcall	.+624    	; 0x2da <USART_TransmitString>
	init_PS2();
  6a:	55 d0       	rcall	.+170    	; 0x116 <init_PS2>
	uint8_t x,y;
    while (1) {
		scan_PS2();
 		_delay_ms(1);
		 
		x =~ data_array[3];
  6c:	c6 ea       	ldi	r28, 0xA6	; 166
  6e:	d0 e0       	ldi	r29, 0x00	; 0
	USART_Init(12);
	USART_TransmitString("Up and running");
	init_PS2();
	uint8_t x,y;
    while (1) {
		scan_PS2();
  70:	16 d1       	rcall	.+556    	; 0x29e <scan_PS2>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  72:	8f ec       	ldi	r24, 0xCF	; 207
  74:	97 e0       	ldi	r25, 0x07	; 7
  76:	01 97       	sbiw	r24, 0x01	; 1
  78:	f1 f7       	brne	.-4      	; 0x76 <main+0x18>
  7a:	00 c0       	rjmp	.+0      	; 0x7c <main+0x1e>
  7c:	00 00       	nop
 		_delay_ms(1);
		 
		x =~ data_array[3];
  7e:	8b 81       	ldd	r24, Y+3	; 0x03
  80:	80 95       	com	r24
		y =~ data_array[4];		
  82:	9c 81       	ldd	r25, Y+4	; 0x04
	//	USART_Transmitchar(0xFF);
		
		if(isPressed(x, up)) {
  84:	84 ff       	sbrs	r24, 4
  86:	06 c0       	rjmp	.+12     	; 0x94 <main+0x36>
			USART_TransmitNumber(600);
  88:	68 e5       	ldi	r22, 0x58	; 88
  8a:	72 e0       	ldi	r23, 0x02	; 2
  8c:	80 e0       	ldi	r24, 0x00	; 0
  8e:	90 e0       	ldi	r25, 0x00	; 0
  90:	32 d1       	rcall	.+612    	; 0x2f6 <USART_TransmitNumber>
  92:	ee cf       	rjmp	.-36     	; 0x70 <main+0x12>
		} else if(isPressed(x, down)) {
  94:	86 ff       	sbrs	r24, 6
  96:	06 c0       	rjmp	.+12     	; 0xa4 <main+0x46>
			USART_TransmitNumber(600);
  98:	68 e5       	ldi	r22, 0x58	; 88
  9a:	72 e0       	ldi	r23, 0x02	; 2
  9c:	80 e0       	ldi	r24, 0x00	; 0
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	2a d1       	rcall	.+596    	; 0x2f6 <USART_TransmitNumber>
  a2:	e6 cf       	rjmp	.-52     	; 0x70 <main+0x12>
		} else if(isPressed(x, right)) {
  a4:	85 ff       	sbrs	r24, 5
  a6:	03 c0       	rjmp	.+6      	; 0xae <main+0x50>
			USART_Transmitchar('r');
  a8:	82 e7       	ldi	r24, 0x72	; 114
  aa:	13 d1       	rcall	.+550    	; 0x2d2 <USART_Transmitchar>
  ac:	e1 cf       	rjmp	.-62     	; 0x70 <main+0x12>
		} else if(isPressed(x, left)) {
  ae:	88 23       	and	r24, r24
  b0:	1c f4       	brge	.+6      	; 0xb8 <main+0x5a>
			USART_Transmitchar('l');
  b2:	8c e6       	ldi	r24, 0x6C	; 108
  b4:	0e d1       	rcall	.+540    	; 0x2d2 <USART_Transmitchar>
  b6:	dc cf       	rjmp	.-72     	; 0x70 <main+0x12>
		}
		else
		{
			USART_Transmitchar('l');
  b8:	8c e6       	ldi	r24, 0x6C	; 108
  ba:	0b d1       	rcall	.+534    	; 0x2d2 <USART_Transmitchar>
  bc:	d9 cf       	rjmp	.-78     	; 0x70 <main+0x12>

000000be <SPI_send>:


char SPI_send(char send_x)
{
	
	SPDR= send_x;
  be:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & _BV(SPIF)))
  c0:	77 9b       	sbis	0x0e, 7	; 14
  c2:	fe cf       	rjmp	.-4      	; 0xc0 <SPI_send+0x2>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c4:	80 e5       	ldi	r24, 0x50	; 80
  c6:	8a 95       	dec	r24
  c8:	f1 f7       	brne	.-4      	; 0xc6 <SPI_send+0x8>
	{
		;
	}		
	_delay_us(30);
	send_x= SPDR;
  ca:	8f b1       	in	r24, 0x0f	; 15

	return(send_x);
}
  cc:	08 95       	ret

000000ce <SPI_send_array>:

void SPI_send_array(char *a, char cmd_length)
{
  ce:	cf 92       	push	r12
  d0:	df 92       	push	r13
  d2:	ef 92       	push	r14
  d4:	ff 92       	push	r15
  d6:	0f 93       	push	r16
  d8:	1f 93       	push	r17
  da:	cf 93       	push	r28
  dc:	df 93       	push	r29
//	    USART_TransmitString("In SPI send");
//	    NewLine();
	int spi_send_array_i;
	for(spi_send_array_i=0; spi_send_array_i<cmd_length; spi_send_array_i++)
  de:	66 23       	and	r22, r22
  e0:	89 f0       	breq	.+34     	; 0x104 <SPI_send_array+0x36>
  e2:	7c 01       	movw	r14, r24
  e4:	6c 01       	movw	r12, r24
  e6:	c6 0e       	add	r12, r22
  e8:	d1 1c       	adc	r13, r1
  ea:	ec 01       	movw	r28, r24
  ec:	8e 01       	movw	r16, r28
  ee:	0e 19       	sub	r16, r14
  f0:	1f 09       	sbc	r17, r15
	{
		data_array[spi_send_array_i]= SPI_send(*a);
  f2:	89 91       	ld	r24, Y+
  f4:	e4 df       	rcall	.-56     	; 0xbe <SPI_send>
  f6:	f8 01       	movw	r30, r16
  f8:	ea 55       	subi	r30, 0x5A	; 90
  fa:	ff 4f       	sbci	r31, 0xFF	; 255
  fc:	80 83       	st	Z, r24
void SPI_send_array(char *a, char cmd_length)
{
//	    USART_TransmitString("In SPI send");
//	    NewLine();
	int spi_send_array_i;
	for(spi_send_array_i=0; spi_send_array_i<cmd_length; spi_send_array_i++)
  fe:	cc 15       	cp	r28, r12
 100:	dd 05       	cpc	r29, r13
 102:	a1 f7       	brne	.-24     	; 0xec <SPI_send_array+0x1e>
		data_array[spi_send_array_i]= SPI_send(*a);
		a++;
	}
//	    USART_TransmitString("after spi send");
//	    NewLine();
}
 104:	df 91       	pop	r29
 106:	cf 91       	pop	r28
 108:	1f 91       	pop	r17
 10a:	0f 91       	pop	r16
 10c:	ff 90       	pop	r15
 10e:	ef 90       	pop	r14
 110:	df 90       	pop	r13
 112:	cf 90       	pop	r12
 114:	08 95       	ret

00000116 <init_PS2>:
//#include "initialize.c"



void init_PS2()
{
 116:	cf 93       	push	r28
 118:	df 93       	push	r29
 11a:	cd b7       	in	r28, 0x3d	; 61
 11c:	de b7       	in	r29, 0x3e	; 62
 11e:	ab 97       	sbiw	r28, 0x2b	; 43
 120:	0f b6       	in	r0, 0x3f	; 63
 122:	f8 94       	cli
 124:	de bf       	out	0x3e, r29	; 62
 126:	0f be       	out	0x3f, r0	; 63
 128:	cd bf       	out	0x3d, r28	; 61

//    USART_TransmitString("In ps2 init");
//    NewLine();
	// All pins o/p except MISO, Pull up enabled on MISO
	SPI_DDR |= (_BV(MOSI_PIN)) | _BV(SCK_PIN) | _BV(SS_PIN);
 12a:	87 b3       	in	r24, 0x17	; 23
 12c:	8c 62       	ori	r24, 0x2C	; 44
 12e:	87 bb       	out	0x17, r24	; 23
	SPI_DDR &= ~(_BV(MISO_PIN));
 130:	bc 98       	cbi	0x17, 4	; 23
	SPI_PORT |= _BV(MISO_PIN);
 132:	c4 9a       	sbi	0x18, 4	; 24
	// SPI interrupt disabled, SPI enable, will be enabled after initialization
	// LSB first, Master Mode,
	// First edge of Clock- Falling
	// Sample on Trailling Edge
	// Clock Frequency 500kHz for 8MHZ crystal
	SPCR= 0b01111101;
 134:	8d e7       	ldi	r24, 0x7D	; 125
 136:	8d b9       	out	0x0d, r24	; 13

// PS2 initiallization
	char  PS2_CONFIGMODE[5]= {0x01, 0x43, 0x00, 0x01, 0x00};
 138:	85 e0       	ldi	r24, 0x05	; 5
 13a:	e0 e6       	ldi	r30, 0x60	; 96
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	de 01       	movw	r26, r28
 140:	11 96       	adiw	r26, 0x01	; 1
 142:	01 90       	ld	r0, Z+
 144:	0d 92       	st	X+, r0
 146:	8a 95       	dec	r24
 148:	e1 f7       	brne	.-8      	; 0x142 <init_PS2+0x2c>
	char  PS2_ANALOGMODE[9]= {0x01, 0x44, 0x00, 0x01, 0x03, 0x00, 0x00, 0x00, 0x00};
 14a:	89 e0       	ldi	r24, 0x09	; 9
 14c:	e5 e6       	ldi	r30, 0x65	; 101
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	de 01       	movw	r26, r28
 152:	16 96       	adiw	r26, 0x06	; 6
 154:	01 90       	ld	r0, Z+
 156:	0d 92       	st	X+, r0
 158:	8a 95       	dec	r24
 15a:	e1 f7       	brne	.-8      	; 0x154 <init_PS2+0x3e>
	char  PS2_SETUPMOTOR[9]= {0x01, 0x4D, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff};
 15c:	89 e0       	ldi	r24, 0x09	; 9
 15e:	ee e6       	ldi	r30, 0x6E	; 110
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	de 01       	movw	r26, r28
 164:	1f 96       	adiw	r26, 0x0f	; 15
 166:	01 90       	ld	r0, Z+
 168:	0d 92       	st	X+, r0
 16a:	8a 95       	dec	r24
 16c:	e1 f7       	brne	.-8      	; 0x166 <init_PS2+0x50>
//	char  PS2_RETURNPRES[9]= {0x01, 0x4f, 0x00, 0xFF, 0xFF, 0x03, 0x00, 0x00, 0x00};
	char  PS2_EXITCONFIG[9]= {0x01, 0x43, 0x00, 0x00, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a};
 16e:	89 e0       	ldi	r24, 0x09	; 9
 170:	e7 e7       	ldi	r30, 0x77	; 119
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	de 01       	movw	r26, r28
 176:	58 96       	adiw	r26, 0x18	; 24
 178:	01 90       	ld	r0, Z+
 17a:	0d 92       	st	X+, r0
 17c:	8a 95       	dec	r24
 17e:	e1 f7       	brne	.-8      	; 0x178 <init_PS2+0x62>
//    USART_TransmitString("Before config mode");
//    NewLine();
// Enter Config mode
	SPI_PORT &= ~(_BV(SS_PIN));	//ATT held low	
 180:	c2 98       	cbi	0x18, 2	; 24
	a=0;
 182:	10 92 bc 00 	sts	0x00BC, r1
	b=0;
 186:	10 92 98 00 	sts	0x0098, r1
	c=0;
 18a:	10 92 bb 00 	sts	0x00BB, r1
	SPI_send_array(PS2_CONFIGMODE,5);		
 18e:	65 e0       	ldi	r22, 0x05	; 5
 190:	ce 01       	movw	r24, r28
 192:	01 96       	adiw	r24, 0x01	; 1
 194:	9c df       	rcall	.-200    	; 0xce <SPI_send_array>
	SPI_PORT |= _BV(SS_PIN);	// Driving Attention Low
 196:	c2 9a       	sbi	0x18, 2	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 198:	8f ec       	ldi	r24, 0xCF	; 207
 19a:	97 e0       	ldi	r25, 0x07	; 7
 19c:	01 97       	sbiw	r24, 0x01	; 1
 19e:	f1 f7       	brne	.-4      	; 0x19c <init_PS2+0x86>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <init_PS2+0x8c>
 1a2:	00 00       	nop
 1a4:	8f ec       	ldi	r24, 0xCF	; 207
 1a6:	97 e0       	ldi	r25, 0x07	; 7
 1a8:	01 97       	sbiw	r24, 0x01	; 1
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <init_PS2+0x92>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <init_PS2+0x98>
 1ae:	00 00       	nop

	_delay_ms(1);
//    USART_TransmitString("After Config mode");
//    NewLine();
// Enter Analog Mode
	SPI_PORT &= ~(_BV(SS_PIN));	//ATT held low	
 1b0:	c2 98       	cbi	0x18, 2	; 24
	a=0;
 1b2:	10 92 bc 00 	sts	0x00BC, r1
	b=0;
 1b6:	10 92 98 00 	sts	0x0098, r1
	c=0;
 1ba:	10 92 bb 00 	sts	0x00BB, r1
	SPI_send_array(PS2_ANALOGMODE,9);		
 1be:	69 e0       	ldi	r22, 0x09	; 9
 1c0:	ce 01       	movw	r24, r28
 1c2:	06 96       	adiw	r24, 0x06	; 6
 1c4:	84 df       	rcall	.-248    	; 0xce <SPI_send_array>
	SPI_PORT |= _BV(SS_PIN);	// Driving Attention Low
 1c6:	c2 9a       	sbi	0x18, 2	; 24
 1c8:	8f ec       	ldi	r24, 0xCF	; 207
 1ca:	97 e0       	ldi	r25, 0x07	; 7
 1cc:	01 97       	sbiw	r24, 0x01	; 1
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <init_PS2+0xb6>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <init_PS2+0xbc>
 1d2:	00 00       	nop
 1d4:	8f ec       	ldi	r24, 0xCF	; 207
 1d6:	97 e0       	ldi	r25, 0x07	; 7
 1d8:	01 97       	sbiw	r24, 0x01	; 1
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <init_PS2+0xc2>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <init_PS2+0xc8>
 1de:	00 00       	nop
//    NewLine();
	_delay_ms(1);
//    USART_TransmitString("Before setup motor mode");
//    NewLine();
// Setup Motor
	SPI_PORT &= ~(_BV(SS_PIN));	//ATT held low	
 1e0:	c2 98       	cbi	0x18, 2	; 24
	a=0;
 1e2:	10 92 bc 00 	sts	0x00BC, r1
	b=0;
 1e6:	10 92 98 00 	sts	0x0098, r1
	c=0;
 1ea:	10 92 bb 00 	sts	0x00BB, r1
	SPI_send_array(PS2_SETUPMOTOR,9);		
 1ee:	69 e0       	ldi	r22, 0x09	; 9
 1f0:	ce 01       	movw	r24, r28
 1f2:	0f 96       	adiw	r24, 0x0f	; 15
 1f4:	6c df       	rcall	.-296    	; 0xce <SPI_send_array>
	SPI_PORT |= _BV(SS_PIN);	// Driving Attention Low
 1f6:	c2 9a       	sbi	0x18, 2	; 24
 1f8:	8f ec       	ldi	r24, 0xCF	; 207
 1fa:	97 e0       	ldi	r25, 0x07	; 7
 1fc:	01 97       	sbiw	r24, 0x01	; 1
 1fe:	f1 f7       	brne	.-4      	; 0x1fc <init_PS2+0xe6>
 200:	00 c0       	rjmp	.+0      	; 0x202 <init_PS2+0xec>
 202:	00 00       	nop
 204:	8f ec       	ldi	r24, 0xCF	; 207
 206:	97 e0       	ldi	r25, 0x07	; 7
 208:	01 97       	sbiw	r24, 0x01	; 1
 20a:	f1 f7       	brne	.-4      	; 0x208 <init_PS2+0xf2>
 20c:	00 c0       	rjmp	.+0      	; 0x20e <init_PS2+0xf8>
 20e:	00 00       	nop
//	    USART_TransmitString("After motor setup");
//	    NewLine();
//		    USART_TransmitString("before exit config mode");
//		    NewLine();
// Exit Config
	SPI_PORT &= ~(_BV(SS_PIN));	//ATT held low	
 210:	c2 98       	cbi	0x18, 2	; 24
	a=0;
 212:	10 92 bc 00 	sts	0x00BC, r1
	b=0;
 216:	10 92 98 00 	sts	0x0098, r1
	c=0;
 21a:	10 92 bb 00 	sts	0x00BB, r1
	SPI_send_array(PS2_EXITCONFIG,9);
 21e:	69 e0       	ldi	r22, 0x09	; 9
 220:	ce 01       	movw	r24, r28
 222:	48 96       	adiw	r24, 0x18	; 24
 224:	54 df       	rcall	.-344    	; 0xce <SPI_send_array>
	SPI_PORT |= _BV(SS_PIN);	// Driving Attention Low
 226:	c2 9a       	sbi	0x18, 2	; 24
 228:	8f ec       	ldi	r24, 0xCF	; 207
 22a:	97 e0       	ldi	r25, 0x07	; 7
 22c:	01 97       	sbiw	r24, 0x01	; 1
 22e:	f1 f7       	brne	.-4      	; 0x22c <init_PS2+0x116>
 230:	00 c0       	rjmp	.+0      	; 0x232 <init_PS2+0x11c>
 232:	00 00       	nop
 234:	8f ec       	ldi	r24, 0xCF	; 207
 236:	97 e0       	ldi	r25, 0x07	; 7
 238:	01 97       	sbiw	r24, 0x01	; 1
 23a:	f1 f7       	brne	.-4      	; 0x238 <init_PS2+0x122>
 23c:	00 c0       	rjmp	.+0      	; 0x23e <init_PS2+0x128>
 23e:	00 00       	nop
	_delay_ms(1);
//	    USART_TransmitString("After exit config mode");
//	    NewLine();

// Enter values in PS2_POLLBUTTON
	volatile char ps2_init_array[9]= {0x01, 0x42, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00};
 240:	89 e0       	ldi	r24, 0x09	; 9
 242:	e0 e8       	ldi	r30, 0x80	; 128
 244:	f0 e0       	ldi	r31, 0x00	; 0
 246:	de 01       	movw	r26, r28
 248:	91 96       	adiw	r26, 0x21	; 33
 24a:	01 90       	ld	r0, Z+
 24c:	0d 92       	st	X+, r0
 24e:	8a 95       	dec	r24
 250:	e1 f7       	brne	.-8      	; 0x24a <init_PS2+0x134>
	volatile int ps2_init_i;
	for(ps2_init_i=0; ps2_init_i<10; ps2_init_i++)
 252:	1b a6       	std	Y+43, r1	; 0x2b
 254:	1a a6       	std	Y+42, r1	; 0x2a
 256:	8a a5       	ldd	r24, Y+42	; 0x2a
 258:	9b a5       	ldd	r25, Y+43	; 0x2b
 25a:	0a 97       	sbiw	r24, 0x0a	; 10
 25c:	bc f4       	brge	.+46     	; 0x28c <init_PS2+0x176>
	{
		PS2_POLLBUTTON[ps2_init_i] = ps2_init_array[ps2_init_i];
 25e:	ea a5       	ldd	r30, Y+42	; 0x2a
 260:	fb a5       	ldd	r31, Y+43	; 0x2b
 262:	aa a5       	ldd	r26, Y+42	; 0x2a
 264:	bb a5       	ldd	r27, Y+43	; 0x2b
 266:	81 e2       	ldi	r24, 0x21	; 33
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	8c 0f       	add	r24, r28
 26c:	9d 1f       	adc	r25, r29
 26e:	a8 0f       	add	r26, r24
 270:	b9 1f       	adc	r27, r25
 272:	8c 91       	ld	r24, X
 274:	e3 56       	subi	r30, 0x63	; 99
 276:	ff 4f       	sbci	r31, 0xFF	; 255
 278:	80 83       	st	Z, r24
//	    NewLine();

// Enter values in PS2_POLLBUTTON
	volatile char ps2_init_array[9]= {0x01, 0x42, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00};
	volatile int ps2_init_i;
	for(ps2_init_i=0; ps2_init_i<10; ps2_init_i++)
 27a:	8a a5       	ldd	r24, Y+42	; 0x2a
 27c:	9b a5       	ldd	r25, Y+43	; 0x2b
 27e:	01 96       	adiw	r24, 0x01	; 1
 280:	9b a7       	std	Y+43, r25	; 0x2b
 282:	8a a7       	std	Y+42, r24	; 0x2a
 284:	8a a5       	ldd	r24, Y+42	; 0x2a
 286:	9b a5       	ldd	r25, Y+43	; 0x2b
 288:	0a 97       	sbiw	r24, 0x0a	; 10
 28a:	4c f3       	brlt	.-46     	; 0x25e <init_PS2+0x148>
	{
		PS2_POLLBUTTON[ps2_init_i] = ps2_init_array[ps2_init_i];
	}
}
 28c:	ab 96       	adiw	r28, 0x2b	; 43
 28e:	0f b6       	in	r0, 0x3f	; 63
 290:	f8 94       	cli
 292:	de bf       	out	0x3e, r29	; 62
 294:	0f be       	out	0x3f, r0	; 63
 296:	cd bf       	out	0x3d, r28	; 61
 298:	df 91       	pop	r29
 29a:	cf 91       	pop	r28
 29c:	08 95       	ret

0000029e <scan_PS2>:

void scan_PS2()
{
//	    USART_TransmitString("before scan PS2");
//	    NewLine();
	SPI_PORT &= ~(_BV(SS_PIN));	//ATT held low	
 29e:	c2 98       	cbi	0x18, 2	; 24
	a=0;	
 2a0:	10 92 bc 00 	sts	0x00BC, r1
        b=0;
 2a4:	10 92 98 00 	sts	0x0098, r1
	c=0;
 2a8:	10 92 bb 00 	sts	0x00BB, r1
	SPI_send_array(PS2_POLLBUTTON,9);
 2ac:	69 e0       	ldi	r22, 0x09	; 9
 2ae:	8d e9       	ldi	r24, 0x9D	; 157
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	0d df       	rcall	.-486    	; 0xce <SPI_send_array>
	SPI_PORT |= _BV(SS_PIN);	// Driving Attention Low
 2b4:	c2 9a       	sbi	0x18, 2	; 24
 2b6:	8f e9       	ldi	r24, 0x9F	; 159
 2b8:	9f e0       	ldi	r25, 0x0F	; 15
 2ba:	01 97       	sbiw	r24, 0x01	; 1
 2bc:	f1 f7       	brne	.-4      	; 0x2ba <scan_PS2+0x1c>
 2be:	00 c0       	rjmp	.+0      	; 0x2c0 <scan_PS2+0x22>
 2c0:	00 00       	nop
 2c2:	08 95       	ret

000002c4 <USART_Init>:
void USART_Init( unsigned int baud )
{
	/* Set baud rate */
	//unsigned int num;
	//num=((F_CPU)/(16*baud))-1;
	UBRRH = (unsigned char)(baud>>8);
 2c4:	90 bd       	out	0x20, r25	; 32
	UBRRL = (unsigned char)baud;
 2c6:	89 b9       	out	0x09, r24	; 9
	/* Enable receiver and transmitter */
	UCSRB = (1<<RXEN)|(1<<TXEN); //|(1<<RXCIE);
 2c8:	88 e1       	ldi	r24, 0x18	; 24
 2ca:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 2stop bit */
	UCSRC = (1<<URSEL)|(1<<USBS)|(3<<UCSZ0);
 2cc:	8e e8       	ldi	r24, 0x8E	; 142
 2ce:	80 bd       	out	0x20, r24	; 32
 2d0:	08 95       	ret

000002d2 <USART_Transmitchar>:
}

void USART_Transmitchar( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSRA & (1<<UDRE)) )
 2d2:	5d 9b       	sbis	0x0b, 5	; 11
 2d4:	fe cf       	rjmp	.-4      	; 0x2d2 <USART_Transmitchar>
	;
	/* Put data into buffer, sends the data */
	UDR = data;
 2d6:	8c b9       	out	0x0c, r24	; 12
 2d8:	08 95       	ret

000002da <USART_TransmitString>:
		return UDR;
	else return 0;
}

void USART_TransmitString(char *str)
{
 2da:	cf 93       	push	r28
 2dc:	df 93       	push	r29
 2de:	ec 01       	movw	r28, r24
	 while(*str>0)
 2e0:	88 81       	ld	r24, Y
 2e2:	88 23       	and	r24, r24
 2e4:	29 f0       	breq	.+10     	; 0x2f0 <USART_TransmitString+0x16>
 2e6:	21 96       	adiw	r28, 0x01	; 1
	 {
		 USART_Transmitchar(*str);
 2e8:	f4 df       	rcall	.-24     	; 0x2d2 <USART_Transmitchar>
	else return 0;
}

void USART_TransmitString(char *str)
{
	 while(*str>0)
 2ea:	89 91       	ld	r24, Y+
 2ec:	81 11       	cpse	r24, r1
 2ee:	fc cf       	rjmp	.-8      	; 0x2e8 <USART_TransmitString+0xe>
	 {
		 USART_Transmitchar(*str);
		 //_delay_ms(1);
		 str++;
	 }
}
 2f0:	df 91       	pop	r29
 2f2:	cf 91       	pop	r28
 2f4:	08 95       	ret

000002f6 <USART_TransmitNumber>:

void USART_TransmitNumber(unsigned long n){
 2f6:	0f 93       	push	r16
 2f8:	1f 93       	push	r17
 2fa:	cf 93       	push	r28
 2fc:	df 93       	push	r29
  if(n >= 10){
 2fe:	6a 30       	cpi	r22, 0x0A	; 10
 300:	71 05       	cpc	r23, r1
 302:	81 05       	cpc	r24, r1
 304:	91 05       	cpc	r25, r1
 306:	50 f0       	brcs	.+20     	; 0x31c <USART_TransmitNumber+0x26>
    USART_TransmitNumber(n/10);
 308:	2a e0       	ldi	r18, 0x0A	; 10
 30a:	30 e0       	ldi	r19, 0x00	; 0
 30c:	40 e0       	ldi	r20, 0x00	; 0
 30e:	50 e0       	ldi	r21, 0x00	; 0
 310:	0d d0       	rcall	.+26     	; 0x32c <__udivmodsi4>
 312:	06 2f       	mov	r16, r22
 314:	ca 01       	movw	r24, r20
 316:	b9 01       	movw	r22, r18
 318:	ee df       	rcall	.-36     	; 0x2f6 <USART_TransmitNumber>
    n = n%10;
 31a:	60 2f       	mov	r22, r16
  }
  USART_Transmitchar(n+'0'); /* n is between 0 and 9 */
 31c:	80 e3       	ldi	r24, 0x30	; 48
 31e:	86 0f       	add	r24, r22
 320:	d8 df       	rcall	.-80     	; 0x2d2 <USART_Transmitchar>
}
 322:	df 91       	pop	r29
 324:	cf 91       	pop	r28
 326:	1f 91       	pop	r17
 328:	0f 91       	pop	r16
 32a:	08 95       	ret

0000032c <__udivmodsi4>:
 32c:	a1 e2       	ldi	r26, 0x21	; 33
 32e:	1a 2e       	mov	r1, r26
 330:	aa 1b       	sub	r26, r26
 332:	bb 1b       	sub	r27, r27
 334:	fd 01       	movw	r30, r26
 336:	0d c0       	rjmp	.+26     	; 0x352 <__udivmodsi4_ep>

00000338 <__udivmodsi4_loop>:
 338:	aa 1f       	adc	r26, r26
 33a:	bb 1f       	adc	r27, r27
 33c:	ee 1f       	adc	r30, r30
 33e:	ff 1f       	adc	r31, r31
 340:	a2 17       	cp	r26, r18
 342:	b3 07       	cpc	r27, r19
 344:	e4 07       	cpc	r30, r20
 346:	f5 07       	cpc	r31, r21
 348:	20 f0       	brcs	.+8      	; 0x352 <__udivmodsi4_ep>
 34a:	a2 1b       	sub	r26, r18
 34c:	b3 0b       	sbc	r27, r19
 34e:	e4 0b       	sbc	r30, r20
 350:	f5 0b       	sbc	r31, r21

00000352 <__udivmodsi4_ep>:
 352:	66 1f       	adc	r22, r22
 354:	77 1f       	adc	r23, r23
 356:	88 1f       	adc	r24, r24
 358:	99 1f       	adc	r25, r25
 35a:	1a 94       	dec	r1
 35c:	69 f7       	brne	.-38     	; 0x338 <__udivmodsi4_loop>
 35e:	60 95       	com	r22
 360:	70 95       	com	r23
 362:	80 95       	com	r24
 364:	90 95       	com	r25
 366:	9b 01       	movw	r18, r22
 368:	ac 01       	movw	r20, r24
 36a:	bd 01       	movw	r22, r26
 36c:	cf 01       	movw	r24, r30
 36e:	08 95       	ret

00000370 <_exit>:
 370:	f8 94       	cli

00000372 <__stop_program>:
 372:	ff cf       	rjmp	.-2      	; 0x372 <__stop_program>
